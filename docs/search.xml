<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>console实用调试技巧</title>
      <link href="/2021/11/03/%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
      <url>/2021/11/03/%E5%AE%9E%E7%94%A8%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基本打印"><a href="#一、基本打印" class="headerlink" title="一、基本打印"></a>一、基本打印</h1><h2 id="1-console-log"><a href="#1-console-log" class="headerlink" title="1 console.log()"></a>1 <code>console.log()</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占位符</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%s&#x27;</span>,hello)</span><br><span class="line"></span><br><span class="line"><span class="comment">// css样式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%cHello World&#x27;</span>,<span class="string">&#x27;color: skyblue; font-size: 30px;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印图片</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%c &#x27;</span>,<span class="string">&#x27;background-image:url(&quot;http://iyeslogo.orbrand.com/150902Google/005.gif&quot;);background-size:120% 120%;background-repeat:no-repeat;background-position:center center;line-height:60px;padding:30px 120px;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印DOM</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%o&#x27;</span>, <span class="built_in">document</span>.body) <span class="comment">//DOM内容</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%O&#x27;</span>, <span class="built_in">document</span>.body) <span class="comment">//DOM对象属性</span></span><br></pre></td></tr></table></figure><h2 id="2-console-warn-amp-amp-console-error"><a href="#2-console-warn-amp-amp-console-error" class="headerlink" title="2 console.warn() &amp;&amp; console.error()"></a>2 <code>console.warn()</code> &amp;&amp; <code>console.error()</code></h2><p>只是显示样式不一样，error会打印函数的调用者，同<code>console.trace()</code></p><h2 id="3-console-info"><a href="#3-console-info" class="headerlink" title="3 console.info()"></a>3 <code>console.info()</code></h2><p>于console.log()一致</p><h1 id="二、打印时间"><a href="#二、打印时间" class="headerlink" title="二、打印时间"></a>二、打印时间</h1><h2 id="1-console-time-amp-amp-console-timeEnd"><a href="#1-console-time-amp-amp-console-timeEnd" class="headerlink" title="1 console.time() &amp;&amp; console.timeEnd()"></a>1 <code>console.time()</code> &amp;&amp; <code>console.timeEnd()</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">//default: 1011.7919921875 ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用标记</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;timer1&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">&quot;timer2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">//timer1: 1002.322021484375 ms</span></span><br><span class="line"><span class="comment">//timer2: 2013.634033203125 ms</span></span><br></pre></td></tr></table></figure><h2 id="2-console-timeLog"><a href="#2-console-timeLog" class="headerlink" title="2 console.timeLog()"></a>2 <code>console.timeLog()</code></h2><p><code>console.timeLog()</code>就是打印计时器<strong>当前的时间</strong>，而<code>console.timeEnd()</code>是<strong>结束计时器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeLog(<span class="string">&quot;timer&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.timeEnd(<span class="string">&quot;timer&quot;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.timeLog(<span class="string">&quot;timer&quot;</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// timer: 1010.26318359375 ms</span></span><br><span class="line"><span class="comment">// timer: 2012.291259765625 ms</span></span><br><span class="line"><span class="comment">// Timer &#x27;timer&#x27; does not exist</span></span><br></pre></td></tr></table></figure><h1 id="三、分组打印"><a href="#三、分组打印" class="headerlink" title="三、分组打印"></a>三、分组打印</h1><h2 id="1-console-group-amp-amp-console-groupEnd"><a href="#1-console-group-amp-amp-console-groupEnd" class="headerlink" title="1 console.group() &amp;&amp; console.groupEnd()"></a>1 <code>console.group()</code> &amp;&amp; <code>console.groupEnd()</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个信息分组</span></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;Alpha&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Alpha Group1&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Alpha Group2&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.group(<span class="string">&#x27;Beat&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Beat Group1&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Beat Group2&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.groupEnd(<span class="string">&#x27;Beat&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Alpha Group3&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.groupEnd(<span class="string">&#x27;Alpha&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Alpha</span></span><br><span class="line"><span class="comment">//  Alpha Group1</span></span><br><span class="line"><span class="comment">//  Alpha Group2</span></span><br><span class="line"><span class="comment">//  Beat</span></span><br><span class="line"><span class="comment">//    Beat Group1</span></span><br><span class="line"><span class="comment">//    Beat Group2</span></span><br><span class="line"><span class="comment">//  Alpha Group3</span></span><br></pre></td></tr></table></figure><h2 id="2-console-groupCollapsed"><a href="#2-console-groupCollapsed" class="headerlink" title="2 console.groupCollapsed()"></a>2 <code>console.groupCollapsed()</code></h2><p>类似于<code>console.group()</code>，不同的是，该方法默认打印的信息是折叠展示的</p><h1 id="四、计数"><a href="#四、计数" class="headerlink" title="四、计数"></a>四、计数</h1><h2 id="1-console-count"><a href="#1-console-count" class="headerlink" title="1 console.count()"></a>1 <code>console.count()</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.count()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// default: 1</span></span><br><span class="line"><span class="comment">// default: 2</span></span><br><span class="line"><span class="comment">// default: 3</span></span><br><span class="line"><span class="comment">// default: 4</span></span><br><span class="line"><span class="comment">// default: 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">&#x27;label&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// label: 1</span></span><br><span class="line"><span class="comment">// label: 2</span></span><br><span class="line"><span class="comment">// label: 3</span></span><br><span class="line"><span class="comment">// label: 4</span></span><br><span class="line"><span class="comment">// label: 5</span></span><br></pre></td></tr></table></figure><h2 id="2-console-countReset"><a href="#2-console-countReset" class="headerlink" title="2 console.countReset()"></a>2 <code>console.countReset()</code></h2><p>重置计算器，提供标签名则重置 标签的计数器 ，不提供重置 默认计数器。</p><h1 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h1><h2 id="1-console-table"><a href="#1-console-table" class="headerlink" title="1 console.table()"></a>1 <code>console.table()</code></h2><p><code>console.table() </code>方法有两个参数，第一个参数是需要打印的对象，第二个参数是需要打印的表格的标题，这里就是数组对象的属性值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table(<span class="built_in">document</span>.body.childNodes,[<span class="string">&#x27;baseURI&#x27;</span>])</span><br></pre></td></tr></table></figure><h2 id="2-console-clear"><a href="#2-console-clear" class="headerlink" title="2 console.clear()"></a>2 <code>console.clear()</code></h2><p>清除控制台的信息</p><h2 id="3-console-assert"><a href="#3-console-assert" class="headerlink" title="3 console.assert()"></a>3 <code>console.assert()</code></h2><p><code>console.assert()</code>方法用于语句断言，当断言为 false时，则在信息到控制台输出错误信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(expression, message)</span><br></pre></td></tr></table></figure><h2 id="4-console-trace"><a href="#4-console-trace" class="headerlink" title="4 console.trace()"></a>4 <code>console.trace()</code></h2><p><code>console.trace()</code>方法可以用于打印当前执行的代码在堆栈中的调用路径。</p><h2 id="5-console-dir"><a href="#5-console-dir" class="headerlink" title="5 console.dir()"></a>5 <code>console.dir()</code></h2><p><code>console.dir()</code>方法可以在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表显示。</p><h2 id="6-console-dirxml"><a href="#6-console-dirxml" class="headerlink" title="6 console.dirxml()"></a>6 <code>console.dirxml()</code></h2><p><code>console.dirxml()</code>方法用于显示一个明确的XML/HTML元素的包括所有后代元素的交互树。 </p><h2 id="7-console-memory"><a href="#7-console-memory" class="headerlink" title="7 console.memory"></a>7 <code>console.memory</code></h2><p><code>console.memory</code>是console对象的一个属性，而不是一个方法。它可以用来查看当前内存的使用情况</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25个正则表达式</title>
      <link href="/2021/10/26/25%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/10/26/25%E4%B8%AA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="25个常用正则表达式"><a href="#25个常用正则表达式" class="headerlink" title="25个常用正则表达式"></a>25个常用正则表达式</h1><h2 id="1、手机号码"><a href="#1、手机号码" class="headerlink" title="1、手机号码"></a>1、手机号码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> phoneReg = <span class="regexp">/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> phoneStr1 = <span class="string">&#x27;18886233487&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(phoneReg.test(phoneStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> phoneStr2 = <span class="string">&#x27;17283017203897&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(phoneReg.test(phoneStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="2、身份证的校验"><a href="#2、身份证的校验" class="headerlink" title="2、身份证的校验"></a>2、身份证的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sfzReg = <span class="regexp">/^[1-9]\d&#123;5&#125;(18|19|([23]\d))\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sfzStr1 = <span class="string">&#x27;415106199801012130&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sfzReg.test(sfzStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sfzStr2 = <span class="string">&#x27;718381298381212183&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(sfzReg.test(sfzStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="3、邮箱的校验"><a href="#3、邮箱的校验" class="headerlink" title="3、邮箱的校验"></a>3、邮箱的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emailReg = <span class="regexp">/^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]&#123;2,4&#125;)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emailStrWY = <span class="string">&#x27;956666@163.com&#x27;</span> <span class="comment">// 163邮箱</span></span><br><span class="line"><span class="keyword">const</span> emailStrQQ = <span class="string">&#x27;956666@qq.com&#x27;</span> <span class="comment">// qq邮箱</span></span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(emailStrWY)) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(emailStrQQ)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> noEmail = <span class="string">&#x27;72873213.com&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(emailReg.test(noEmail)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="4、URL的校验"><a href="#4、URL的校验" class="headerlink" title="4、URL的校验"></a>4、URL的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlReg = <span class="regexp">/^((https?|ftp|file):\/\/)?([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)([\/\w \.-]*)*\/?$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlStr1 = <span class="string">&#x27;https://haha.sunshine.com/xxx/xxx&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(urlReg.test(urlStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlStr2 = <span class="string">&#x27;sss://haha.sunshine.com/xxx/xxx&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(urlReg.test(urlStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="5、IPv4的校验"><a href="#5、IPv4的校验" class="headerlink" title="5、IPv4的校验"></a>5、IPv4的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ipv4Reg = <span class="regexp">/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipv4Str1 = <span class="string">&#x27;122.12.56.65&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(ipv4Reg.test(ipv4Str1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ipv4Str2 = <span class="string">&#x27;122.12.56.655&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(ipv4Reg.test(ipv4Str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="6、16进制颜色的校验"><a href="#6、16进制颜色的校验" class="headerlink" title="6、16进制颜色的校验"></a>6、16进制颜色的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color16Reg = <span class="regexp">/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color16Str1 = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(color16Reg.test(color16Str1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> color16Str2 = <span class="string">&#x27;#1234567&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(color16Reg.test(color16Str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="7、日期-YYYY-MM-DD"><a href="#7、日期-YYYY-MM-DD" class="headerlink" title="7、日期 YYYY-MM-DD"></a>7、日期 YYYY-MM-DD</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateReg = <span class="regexp">/^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr1 = <span class="string">&#x27;2021-10-10&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr2 = <span class="string">&#x27;2021-01-01 1&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="8、日期-YYYY-MM-DD-hh-mm-ss"><a href="#8、日期-YYYY-MM-DD-hh-mm-ss" class="headerlink" title="8、日期 YYYY-MM-DD hh:mm:ss"></a>8、日期 YYYY-MM-DD hh:mm:ss</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateReg = <span class="regexp">/^(\d&#123;1,4&#125;)(-|\/)(\d&#123;1,2&#125;)\2(\d&#123;1,2&#125;) (\d&#123;1,2&#125;):(\d&#123;1,2&#125;):(\d&#123;1,2&#125;)$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr1 = <span class="string">&#x27;2021-10-10 16:16:16&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr2 = <span class="string">&#x27;2021-10-10 16:&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="9、整数的校验"><a href="#9、整数的校验" class="headerlink" title="9、整数的校验"></a>9、整数的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intReg = <span class="regexp">/^[-+]?\d*$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intNum1 = <span class="number">12345</span></span><br><span class="line"><span class="built_in">console</span>.log(intReg.test(intNum1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intNum2 = <span class="number">12345.1</span></span><br><span class="line"><span class="built_in">console</span>.log(intReg.test(intNum2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="10、小数的校验"><a href="#10、小数的校验" class="headerlink" title="10、小数的校验"></a>10、小数的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> floatReg = <span class="regexp">/^[-\+]?\d+(\.\d+)?$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> floatNum = <span class="number">1234.5</span></span><br><span class="line"><span class="built_in">console</span>.log(floatReg.test(floatNum)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="11、保留n位小数"><a href="#11、保留n位小数" class="headerlink" title="11、保留n位小数"></a>11、保留n位小数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFloat</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^([1-9]+[\d]*(.[0-9]&#123;1,<span class="subst">$&#123;n&#125;</span>&#125;)?)$`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保留2位小数</span></span><br><span class="line"><span class="keyword">const</span> floatReg = checkFloat(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> floatNum1 = <span class="number">1234.5</span></span><br><span class="line"><span class="built_in">console</span>.log(floatReg.test(floatNum1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> floatNum2 = <span class="number">1234.55</span></span><br><span class="line"><span class="built_in">console</span>.log(floatReg.test(floatNum2)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> floatNum3 = <span class="number">1234.555</span></span><br><span class="line"><span class="built_in">console</span>.log(floatReg.test(floatNum3)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="12、邮政编号的校验"><a href="#12、邮政编号的校验" class="headerlink" title="12、邮政编号的校验"></a>12、邮政编号的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postalNoReg = <span class="regexp">/^\d&#123;6&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postalNoStr1 = <span class="string">&#x27;522000&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(postalNoReg.test(postalNoStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> postalNoStr2 = <span class="string">&#x27;5220000&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(postalNoReg.test(postalNoStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="13、QQ号的校验"><a href="#13、QQ号的校验" class="headerlink" title="13、QQ号的校验"></a>13、QQ号的校验</h2><p>说明：5-11位数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qqReg = <span class="regexp">/^[1-9][0-9]&#123;4,10&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> qqStr1 = <span class="string">&#x27;1915801633&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(qqReg.test(qqStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> qqStr2 = <span class="string">&#x27;191580163333&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(qqReg.test(qqStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="14、微信号的校验"><a href="#14、微信号的校验" class="headerlink" title="14、微信号的校验"></a>14、微信号的校验</h2><p>说明：6至20位，以字母开头，字母，数字，减号，下划线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wxReg = <span class="regexp">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wxStr1 = <span class="string">&#x27;linsanxin885577&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(wxReg.test(wxStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wxStr2 = <span class="string">&#x27;厉害了我的vx&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(wxReg.test(wxStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="15、车牌号的校验"><a href="#15、车牌号的校验" class="headerlink" title="15、车牌号的校验"></a>15、车牌号的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> carNoReg = <span class="regexp">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> carNoStr1 = <span class="string">&#x27;粤A12345&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(carNoReg.test(carNoStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> carNoStr2 = <span class="string">&#x27;广东A12345&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(carNoReg.test(carNoStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="16、只含字母的字符串"><a href="#16、只含字母的字符串" class="headerlink" title="16、只含字母的字符串"></a>16、只含字母的字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> letterReg = <span class="regexp">/^[a-zA-Z]+$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterStr1 = <span class="string">&#x27;sunshineLin&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(letterReg.test(letterStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> letterStr2 = <span class="string">&#x27;sunshine_Lin&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(letterReg.test(letterStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="17、包含中文的字符串"><a href="#17、包含中文的字符串" class="headerlink" title="17、包含中文的字符串"></a>17、包含中文的字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cnReg = <span class="regexp">/[\u4E00-\u9FA5]/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cnStr1 = <span class="string">&#x27;我是sunshine_Lin，林三心&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(cnReg.test(cnStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cnStr2 = <span class="string">&#x27;sunshine_Lin&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(cnReg.test(cnStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="18、密码强度的校验"><a href="#18、密码强度的校验" class="headerlink" title="18、密码强度的校验"></a>18、密码强度的校验</h2><p>说明：密码中必须包含字母、数字、特称字符，至少8个字符，最多30个字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> passwordReg = <span class="regexp">/(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[^a-zA-Z0-9]).&#123;8,30&#125;/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password1 = <span class="string">&#x27;sunshine_Lin12345..&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(passwordReg.test(password1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> password2 = <span class="string">&#x27;sunshineLin12345&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(passwordReg.test(password2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="19、字符串长度n的校验"><a href="#19、字符串长度n的校验" class="headerlink" title="19、字符串长度n的校验"></a>19、字符串长度n的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStrLength</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`^.&#123;<span class="subst">$&#123;n&#125;</span>&#125;$`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验长度为3的字符串</span></span><br><span class="line"><span class="keyword">const</span> lengthReg = checkStrLength(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;hhh&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(lengthReg.test(str1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;hhhhh&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(lengthReg.test(str2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="20、文件拓展名的校验"><a href="#20、文件拓展名的校验" class="headerlink" title="20、文件拓展名的校验"></a>20、文件拓展名的校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFileName</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr = arr.map(<span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`.<span class="subst">$&#123;name&#125;</span>`</span>).join(<span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;arr&#125;</span>)$`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filenameReg = checkFileName([<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;txt&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename1 = <span class="string">&#x27;sunshine.jpg&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(filenameReg.test(filename1)) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> filename2 = <span class="string">&#x27;sunshine.png&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(filenameReg.test(filename2)) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> filename3 = <span class="string">&#x27;sunshine.txt&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(filenameReg.test(filename3)) <span class="comment">// true</span></span><br><span class="line"><span class="keyword">const</span> filename4 = <span class="string">&#x27;sunshine.md&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(filenameReg.test(filename4)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="21、匹配img和src"><a href="#21、匹配img和src" class="headerlink" title="21、匹配img和src"></a>21、匹配img和src</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgReg = <span class="regexp">/&lt;img.*?src=[\&quot;|\&#x27;]?(.*?)[\&quot;|\&#x27;]?\s.*?&gt;/ig</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;div&gt;&lt;/div&gt;&lt;img src=&quot;sunshine.png&quot; /&gt;&lt;img src=&quot;sunshine111.png&quot; /&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(imgReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;&lt;img src=&quot;sunshine.png&quot; /&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;sunshine.png&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 11,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div&gt;&lt;/div&gt;&lt;img src=&quot;sunshine.png&quot; /&gt;&lt;img src=&quot;sunshine111.png&quot; /&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(imgReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;&lt;img src=&quot;sunshine111.png&quot; /&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;sunshine111.png&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 37,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div&gt;&lt;/div&gt;&lt;img src=&quot;sunshine.png&quot; /&gt;&lt;img src=&quot;sunshine111.png&quot; /&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ] </span></span><br></pre></td></tr></table></figure><h2 id="22、匹配html中的注释"><a href="#22、匹配html中的注释" class="headerlink" title="22、匹配html中的注释"></a>22、匹配html中的注释</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> noteReg = <span class="regexp">/&lt;!--(.*?)--&gt;/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt; &lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(noteReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;&lt;!--一个div标签--&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;一个div标签&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 0,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt; &lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(noteReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;&lt;!--一个div标签--&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;一个div标签&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 27,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt; &lt;!--一个div标签--&gt; &lt;div&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h2 id="23、匹配html中的style"><a href="#23、匹配html中的style" class="headerlink" title="23、匹配html中的style"></a>23、匹配html中的style</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styleReg = <span class="regexp">/style=&quot;[^=&gt;]*&quot;([(\s+\w+=)|&gt;])/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(styleReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;style=&quot;background:#000;&quot;&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 5,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(styleReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;style=&quot;color:#fff&quot;&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 36,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h2 id="24、匹配html中的颜色"><a href="#24、匹配html中的颜色" class="headerlink" title="24、匹配html中的颜色"></a>24、匹配html中的颜色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colorReg = <span class="regexp">/#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colorReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;#000&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;000&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 23,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(colorReg.exec(htmlStr))</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#x27;#fff&#x27;,</span></span><br><span class="line"><span class="comment">//   &#x27;fff&#x27;,</span></span><br><span class="line"><span class="comment">//   index: 49,</span></span><br><span class="line"><span class="comment">//   input: &#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&#x27;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h2 id="25、匹配htmlTag（html标签）"><a href="#25、匹配htmlTag（html标签）" class="headerlink" title="25、匹配htmlTag（html标签）"></a>25、匹配htmlTag（html标签）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> endReg = <span class="regexp">/&lt;(&quot;[^&quot;]*&quot;|&#x27;[^&#x27;]*&#x27;|[^&#x27;&quot;&gt;])*&gt;/g</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlStr = <span class="string">&#x27;&lt;div style=&quot;background:#000;&quot;&gt;&lt;span style=&quot;color:#fff&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;h1&gt;&lt;/h1&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(endReg.exec(htmlStr))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端自动化部署</title>
      <link href="/2021/10/22/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/10/22/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>服务器：CentOS 7.6</li></ul><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful</title>
      <link href="/2021/03/19/RESTful/"/>
      <url>/2021/03/19/RESTful/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><h3 id="URI-vs-URL"><a href="#URI-vs-URL" class="headerlink" title="URI vs URL:"></a>URI vs URL:</h3><p>每一个URL都是一个URI。一个URI并不保证具有表述。一个URI什么都不是，它只是一个标识。而一个URL是一个可以被<strong>引用</strong>的标识。<code>http:URI</code>，<code>ftp:URI</code>这些是URL，非URL的URI：<code>urn:isbn:97814449358093</code>。</p><h3 id="REST"><a href="#REST" class="headerlink" title="REST:"></a>REST:</h3><p>REST起源于Roy Thomas Fieling 的<a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm">论文</a>。</p><p>REST(Representational State Transfer)，资源在网络中以某种表现形式进行状态转移。</p><p><strong>Resources</strong>:<strong>资源</strong>，是网络上的一个具体信息。可以是一段文本，一张图片…任何可以被引用的事物都可以是资源，唯一的条件就是<strong>每个资源都必须拥有url</strong>。</p><p><strong>Representation</strong>：<strong>表现层</strong>，把资源具体呈现出来的形式，叫做它的<strong>表现层</strong>。</p><p><strong>State Transfer</strong>：<strong>状态转移</strong>，客户端想要操作服务器，必须通过某种手段，让服务器发生状态转移。状态转移是建立在表现层之上的，所以叫”<strong>表现层状态转移</strong>“。</p><h3 id="HTTP动词："><a href="#HTTP动词：" class="headerlink" title="HTTP动词："></a>HTTP动词：</h3><ul><li><strong>GET</strong>:获取资源的某个标识。</li><li><strong>DELETE</strong>:销毁一个资源。</li><li><strong>POST</strong>:基于给定的表述信息，在当前资源的下一级创建新的资源。</li><li><strong>PUT</strong>:用给定的表述信息完整的替换资源的当前状态。</li><li><strong>PATCH</strong>:用给定的表述信息部分的替换资源的当前状态。</li><li><strong>HEAD</strong>:只返回HTTP状态码和报头，</li><li><strong>OPTIONS</strong>:返回的报头展示这个资源所支持的所有HTTP方法。</li></ul><p>补充：</p><p><strong>幂等性</strong>：</p><p><code>5 * 0 = 0，5 * 0 * 0=0</code>例如DELETE一个资源，无论发送多少次请求，资源的状态和你发送的第一次DELETE请求都是一样的。PUT，GET也是幂等的。</p><p>一句话描述就是：**URL定位资源，用HTTP动词（<code>GET</code>,<code>POST</code>,<code>DELETE</code>,<code>PUT</code>…）描述操作。</p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><h5 id="状态码家族"><a href="#状态码家族" class="headerlink" title="状态码家族"></a>状态码家族</h5><ul><li>1XX:Informational:HTTP客户端和服务器之间进行协商时使用。</li><li>2XX:Successful:客户端所要求的任意状态转换已经发生。</li><li>3XX:Redirection:客户端要求的状态转换没有发生，客户端发起一个稍不同的HTTP请求，该请求完成客户端要求的行为。</li><li>4XX:Client Error:客户端要求的状态转换没有发生，客户端的请求可能有缺陷、不合逻辑、自相矛盾等等。</li><li>5XX:Server Error:由于服务器的原因，客户端要求的状态转换没有发生。</li></ul><h5 id="四个状态码：最低限度"><a href="#四个状态码：最低限度" class="headerlink" title="四个状态码：最低限度"></a>四个状态码：最低限度</h5><ul><li>200（ok）：一切顺利，实体消息中的文档（如果有）是某个资源的一份表述。</li><li>301（Moved Permanently）：客户端触发某个将资源从一个URL移动到另一个URL的状态转化将会发送该状态码</li><li>400（Bad Request）：客户端存在问题，实体消息体中的文档（如果有）是一段错误消息。</li><li>500（Internal Server Error）：服务器存在问题。</li></ul><p>在添加两个</p><ul><li>404（Not Found）和409（Conflict）</li></ul><h3 id="理论补充"><a href="#理论补充" class="headerlink" title="理论补充"></a>理论补充</h3><h4 id="表述选择："><a href="#表述选择：" class="headerlink" title="表述选择："></a>表述选择：</h4><h5 id="内容协商"><a href="#内容协商" class="headerlink" title="内容协商"></a>内容协商</h5><p>客户端可以使用特定的HTTP请求报头告诉服务器它想要那些表述，这个过程称为内容协商。HTTP定义了5个请求报头，统称<code>Accept-*</code>    。有两个报头<code>Accept</code>和<code>Accept-Lanuage</code>。</p><p>例如浏览器发起HTTP请求浏览器会发送：</p><p><code>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</code></p><p>HTML表述和XHTML表示为最高优先级，XML优先级低一些（q=0.9)，接着是接受二进制图片，然后是任何媒体类型，优先级最低(q=0.8)。</p><p><code>Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</code></p><p>优先级最高的为中文。</p><h5 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h5><p><code>Cache-Control</code>报头可以增加缓存功能，</p><p><code>Cache-Control:max-age=3600</code>缓存一个小时，会作用于整个HTTP响应，包括报头和响应码。</p><p><code>Cache-Control:max-age=3600</code>不缓存。</p><h5 id="条件GET请求"><a href="#条件GET请求" class="headerlink" title="条件GET请求"></a>条件GET请求</h5><p><code>Last-Modified</code>和<code>ETag</code></p><p><code>Last-Modified</code>告诉客户端该资源的状态上次改变的时间。客户端会记录下它的值，在下次请求之前，将该值放在<code>If-Modified-Since</code>，如果服务器端的资源没有变化，则自动返回 HTTP 304（Not Changed.）状态码，内容为空。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last-Modified : Fri , 12 May 2006 18:53:33 GMT</span><br><span class="line">If-Modified-Since : Fri , 12 May 2006 18:53:33 GMT</span><br></pre></td></tr></table></figure><p><code>ETag</code>的过程和<code>Last-Modified</code>一致，下次请求的HTTP头里带有<code>If-None-Match </code>，一致会返回304，不一致会发送200和完整的消息体以及新的<code>ETag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Etag:&quot;2e681a-6-5d044840&quot;</span><br><span class="line">If-None-Match:&quot;2e681a-6-5d044840&quot;</span><br></pre></td></tr></table></figure><p><code>Etag</code>更加可靠。</p><h5 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h5><p>客户端会发送</p><p><code>Accept-Encoding: gzip</code></p><p>服务器如果理解这种压缩算法，会对表述进行压缩，提供给客户端。</p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>RESTful服务器实现中并不存在会话（session）</p><h5 id="Basic认证"><a href="#Basic认证" class="headerlink" title="Basic认证"></a>Basic认证</h5><p>是一种简单的用户名/密码方案。</p><p><code>Authorization: Basic YWRtaW46YWRtaW4=</code> ,是对用户名/密码的Base64编码转化。</p><h5 id="OAuth-1-0"><a href="#OAuth-1-0" class="headerlink" title="OAuth 1.0"></a>OAuth 1.0</h5><h5 id="OAuth-2-0"><a href="#OAuth-2-0" class="headerlink" title="OAuth 2.0"></a>OAuth 2.0</h5><p>小明是新浪微博的用户，想要通过第三方客户端来浏览微博，那第三方客户端如何获取小明在新浪微博的用户信息和时间线？</p><p>直接授予账号密码的弊端：<br>1、第三方客户端可能会保存小明的账号密码；<br>2、第三方客户端可以访问小明在新浪微博上的所有数据；<br>3、要收回第三方客户端的权限，只有修改密码。</p><p><img src="7276920-f72fa1c71f94d2e7.webp" alt="OAuth 2.0"></p><h2 id="如何设计"><a href="#如何设计" class="headerlink" title="如何设计"></a>如何设计</h2><p>API尽量部署到专用域名下且总是使用HTTPs协议。</p><p>也可以放在主域名下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com</span><br><span class="line">https://www.example.com/api/</span><br></pre></td></tr></table></figure><p>将API版本放在URL中，另外一种是放在HTTP头信息中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/</span><br></pre></td></tr></table></figure><p>URL只使用<strong>名词的复数</strong>来指定资源，<strong>不使用动词</strong>，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET https://www.api.example.com/friends   获取某人好友列表</span><br><span class="line">POST https://www.api.example.com/friends/ID 添加好友</span><br><span class="line">PUT https://www.api.example.com/friends/ID 更新好友(提供好友全部信息)</span><br><span class="line">PATCH https://www.api.example.com/friends/ID 更新好友(提供好友部分信息)</span><br><span class="line">DELETE https://www.api.example.com/friends/ID 删除好友</span><br><span class="line">DELETE https://www.api.example.com/friends 删除全部好友</span><br><span class="line"></span><br><span class="line">GET https://www.api.example.com/books/ID/pages 得到某个书的所有页</span><br><span class="line">DELETE https://www.api.example.com/books/ID/pages/ID：删除某个指定书的指定页</span><br></pre></td></tr></table></figure><p>过滤信息：API提供参数，过滤返回的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br></pre></td></tr></table></figure><p>参数设计允许冗余</p><p><code>/books/ID/pages</code>和<code>/pages?book_id=ID</code></p><p>利用<strong>状态码</strong>来提示信息<code>200</code>,<code>404</code>,<code>201</code>等</p><p><strong>错误处理</strong>：返回信息中包含error为键名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  error:<span class="string">&quot;Invalid name&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>返回结果</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /collection 返回资源对象的列表(数组)</span><br><span class="line">GET /collection/resource：返回单个资源对象</span><br><span class="line">POST /collection：返回新生成的资源对象</span><br><span class="line">PUT /collection/resource：返回完整的资源对象</span><br><span class="line">PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">DELETE /collection/resource：返回一个空文档</span><br></pre></td></tr></table></figure><p><strong>Hypermedia API</strong></p><p>Hypermedia：超媒体，返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。<br>当用户向<code>api.example.com</code>发送请求后会得到</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//link属性，用户读取这个属性就知道下一步该调用什么API</span></span><br><span class="line">  <span class="attr">&quot;link&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">//rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址）</span></span><br><span class="line">    <span class="attr">&quot;rel&quot;</span>:   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span>,</span><br><span class="line">    <span class="comment">//href表示API的路径</span></span><br><span class="line">    <span class="attr">&quot;href&quot;</span>:  <span class="string">&quot;https://api.example.com/zoos&quot;</span>,</span><br><span class="line">    <span class="comment">//title表示API的标题</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;List of zoos&quot;</span>,</span><br><span class="line">    <span class="comment">//type表示返回类型</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span>:  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问 <code>https://api.github.com/</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  current_user_url: <span class="string">&quot;https://api.github.com/user&quot;</span>,</span><br><span class="line">  current_user_authorizations_html_url: <span class="string">&quot;https://github.com/settings/connections/applications&#123;/client_id&#125;&quot;</span>,</span><br><span class="line">  authorizations_url: <span class="string">&quot;https://api.github.com/authorizations&quot;</span>,</span><br><span class="line">  code_search_url: <span class="string">&quot;https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</span>,</span><br><span class="line">  commit_search_url: <span class="string">&quot;https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</span>,</span><br><span class="line">  emails_url: <span class="string">&quot;https://api.github.com/user/emails&quot;</span>,</span><br><span class="line">  emojis_url: <span class="string">&quot;https://api.github.com/emojis&quot;</span>,</span><br><span class="line">  events_url: <span class="string">&quot;https://api.github.com/events&quot;</span>,</span><br><span class="line">  feeds_url: <span class="string">&quot;https://api.github.com/feeds&quot;</span>,</span><br><span class="line">  followers_url: <span class="string">&quot;https://api.github.com/user/followers&quot;</span>,</span><br><span class="line">  following_url: <span class="string">&quot;https://api.github.com/user/following&#123;/target&#125;&quot;</span>,</span><br><span class="line">  gists_url: <span class="string">&quot;https://api.github.com/gists&#123;/gist_id&#125;&quot;</span>,</span><br><span class="line">  hub_url: <span class="string">&quot;https://api.github.com/hub&quot;</span>,</span><br><span class="line">  issue_search_url: <span class="string">&quot;https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</span>,</span><br><span class="line">  issues_url: <span class="string">&quot;https://api.github.com/issues&quot;</span>,</span><br><span class="line">  keys_url: <span class="string">&quot;https://api.github.com/user/keys&quot;</span>,</span><br><span class="line">  label_search_url: <span class="string">&quot;https://api.github.com/search/labels?q=&#123;query&#125;&amp;repository_id=&#123;repository_id&#125;&#123;&amp;page,per_page&#125;&quot;</span>,</span><br><span class="line">  notifications_url: <span class="string">&quot;https://api.github.com/notifications&quot;</span>,</span><br><span class="line">  organization_url: <span class="string">&quot;https://api.github.com/orgs/&#123;org&#125;&quot;</span>,</span><br><span class="line">  organization_repositories_url: <span class="string">&quot;https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;</span>,</span><br><span class="line">  organization_teams_url: <span class="string">&quot;https://api.github.com/orgs/&#123;org&#125;/teams&quot;</span>,</span><br><span class="line">  public_gists_url: <span class="string">&quot;https://api.github.com/gists/public&quot;</span>,</span><br><span class="line">  rate_limit_url: <span class="string">&quot;https://api.github.com/rate_limit&quot;</span>,</span><br><span class="line">  repository_url: <span class="string">&quot;https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;&quot;</span>,</span><br><span class="line">  repository_search_url: <span class="string">&quot;https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</span>,</span><br><span class="line">  current_user_repositories_url: <span class="string">&quot;https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;&quot;</span>,</span><br><span class="line">  starred_url: <span class="string">&quot;https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;&quot;</span>,</span><br><span class="line">  starred_gists_url: <span class="string">&quot;https://api.github.com/gists/starred&quot;</span>,</span><br><span class="line">  user_url: <span class="string">&quot;https://api.github.com/users/&#123;user&#125;&quot;</span>,</span><br><span class="line">  user_organizations_url: <span class="string">&quot;https://api.github.com/user/orgs&quot;</span>,</span><br><span class="line">  user_repositories_url: <span class="string">&quot;https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;&quot;</span>,</span><br><span class="line">  user_search_url: <span class="string">&quot;https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取emails访问<code>https://api.github.com/user/emails</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  message: <span class="string">&quot;Requires authentication&quot;</span>,</span><br><span class="line">  documentation_url: <span class="string">&quot;https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="状态码大全"><a href="#状态码大全" class="headerlink" title="状态码大全"></a>状态码大全</h3><ul><li>1xx（Informational）<ul><li>100（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。 </li><li>101（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul></li><li>2xx （Successful）<ul><li>200（成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</li><li>201（已创建）  请求成功并且服务器创建了新的资源。</li><li>202（已接受）  服务器已接受请求，但尚未处理。</li><li>203（非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204（无内容）  服务器成功处理了请求，但没有返回任何内容。</li><li>205（重置内容） 服务器成功处理了请求，但没有返回任何内容。</li><li>206（部分内容）  服务器成功处理了部分 GET 请求。</li></ul></li><li>3xx （Redirection)<ul><li>300（多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301（永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302（临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>303（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</li><li>305（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</li><li>307（临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li></ul></li><li>4xx（Client Error）<ul><li>400（错误请求） 服务器不理解请求的语法。</li><li>401（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止） 服务器拒绝请求。</li><li>404（未找到） 服务器找不到请求的网页。</li><li>405（方法禁用） 禁用请求中指定的方法。</li><li>406（不接受） 无法使用请求的内容特性响应请求的网页。</li><li>407（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</li><li>408（请求超时）  服务器等候请求时发生超时。</li><li>409（冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</li><li>410（已删除）  如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</li><li>412（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415（不支持的媒体类型） 请求的格式不受请求页面的支持。</li><li>416（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</li></ul></li><li>5xx（Server Error）<ul><li>500（服务器内部错误）  服务器遇到错误，无法完成请求。</li><li>501（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</li><li>504（网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。 </li></ul></li></ul><h3 id="HTTP报头"><a href="#HTTP报头" class="headerlink" title="HTTP报头"></a>HTTP报头</h3><h4 id="Request-Header"><a href="#Request-Header" class="headerlink" title="Request Header"></a>Request Header</h4><table><thead><tr><th>Header</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>Accept</td><td>指定客户端能够接收的内容类型</td><td><code>Accept: text/plain, text/html</code></td></tr><tr><td>Accept-Charset</td><td>浏览器可以接受的字符编码集。</td><td><code>Accept-Charset: iso-8859-5</code></td></tr><tr><td>Accept-Encoding</td><td>指定浏览器可以支持的web服务器返回内容压缩编码类型。</td><td><code>Accept-Encoding: compress, gzip</code></td></tr><tr><td>Accept-Language</td><td>浏览器可接受的语言</td><td><code>Accept-Language: en,zh</code></td></tr><tr><td>Accept-Ranges</td><td>可以请求网页实体的一个或者多个子范围字段</td><td><code>Accept-Ranges: bytes</code></td></tr><tr><td>Authorization</td><td>HTTP授权的授权证书</td><td><code>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></td></tr><tr><td>Cache-Control</td><td>指定请求和响应遵循的缓存机制</td><td><code>Cache-Control: no-cache</code></td></tr><tr><td>Connection</td><td>表示是否需要持久连接。（HTTP 1.1默认进行持久连接）</td><td><code>Connection: close</code></td></tr><tr><td>Cookie</td><td>HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</td><td><code>Cookie: $Version=1; Skin=new;</code></td></tr><tr><td>Content-Length</td><td>请求的内容长度</td><td><code>Content-Length: 348</code></td></tr><tr><td>Content-Type</td><td>请求的与实体对应的MIME信息</td><td><code>Content-Type: application/x-www-form-urlencoded</code></td></tr><tr><td>Date</td><td>请求发送的日期和时间</td><td><code>Date: Tue, 15 Nov 2010 08:12:31 GMT</code></td></tr><tr><td>Expect</td><td>请求的特定的服务器行为</td><td><code>Expect: 100-continue</code></td></tr><tr><td>From</td><td>发出请求的用户的Email</td><td><code>From: user@email.com</code></td></tr><tr><td>Host</td><td>指定请求的服务器的域名和端口号</td><td><code>Host: www.zcmhi.com</code></td></tr><tr><td>If-Match</td><td>只有请求内容与实体相匹配才有效</td><td><code>If-Match: “737060cd8c284d8af7ad3082f209582d”</code></td></tr><tr><td>If-Modified-Since</td><td>如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回304代码</td><td><code>If-Modified-Since: Sat, 29 Oct 2010 19:43:31 GMT</code></td></tr><tr><td>If-None-Match</td><td>如果内容未改变返回304代码，参数为服务器先前发送的Etag，与服务器回应的Etag比较判断是否改变</td><td><code>If-None-Match: “737060cd8c284d8af7ad3082f209582d”</code></td></tr><tr><td>If-Range</td><td>如果实体未改变，服务器发送客户端丢失的部分，否则发送整个实体。参数也为Etag</td><td><code>If-Range: “737060cd8c284d8af7ad3082f209582d”</code></td></tr><tr><td>If-Unmodified-Since</td><td>只在实体在指定时间之后未被修改才请求成功</td><td><code>If-Unmodified-Since: Sat, 29 Oct 2010 19:43:31 GMT</code></td></tr><tr><td>Max-Forwards</td><td>限制信息通过代理和网关传送的时间</td><td><code>Max-Forwards: 10</code></td></tr><tr><td>Pragma</td><td>用来包含实现特定的指令</td><td><code>Pragma: no-cache</code></td></tr><tr><td>Proxy-Authorization</td><td>连接到代理的授权证书</td><td><code>Proxy-Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</code></td></tr><tr><td>Range</td><td>只请求实体的一部分，指定范围</td><td><code>Range: bytes=500-999</code></td></tr><tr><td>Referer</td><td>先前网页的地址，当前请求网页紧随其后,即来路</td><td><code>Referer: http://www.zcmhi.com/archives/71.html</code></td></tr><tr><td>TE</td><td>客户端愿意接受的传输编码，并通知服务器接受接受尾加头信息</td><td><code>TE: trailers,deflate;q=0.5</code></td></tr><tr><td>Upgrade</td><td>向服务器指定某种传输协议以便服务器进行转换（如果支持）</td><td><code>Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11</code></td></tr><tr><td>User-Agent</td><td>User-Agent的内容包含发出请求的用户信息</td><td><code>User-Agent: Mozilla/5.0 (Linux; X11)</code></td></tr><tr><td>Via</td><td>通知中间网关或代理服务器地址，通信协议</td><td><code>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</code></td></tr><tr><td>Warning</td><td>关于消息实体的警告信息</td><td><code>Warn: 199 Miscellaneous warning</code></td></tr></tbody></table><h4 id="Responses-Header"><a href="#Responses-Header" class="headerlink" title="Responses Header"></a>Responses Header</h4><table><thead><tr><th>Header</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>表明服务器是否支持指定范围请求及哪种类型的分段请求</td><td><code>Accept-Ranges: bytes</code></td></tr><tr><td>Age</td><td>从原始服务器到代理缓存形成的估算时间（以秒计，非负）</td><td><code>Age: 12</code></td></tr><tr><td>Allow</td><td>对某网络资源的有效的请求行为，不允许则返回405</td><td><code>Allow: GET, HEAD</code></td></tr><tr><td>Cache-Control</td><td>告诉所有的缓存机制是否可以缓存及哪种类型</td><td><code>Cache-Control: no-cache</code></td></tr><tr><td>Content-Encoding</td><td>web服务器支持的返回内容压缩编码类型。</td><td><code>Content-Encoding: gzip</code></td></tr><tr><td>Content-Language</td><td>响应体的语言</td><td><code>Content-Language: en,zh</code></td></tr><tr><td>Content-Length</td><td>响应体的长度</td><td><code>Content-Length: 348</code></td></tr><tr><td>Content-Location</td><td>请求资源可替代的备用的另一地址</td><td><code>Content-Location: /index.htm</code></td></tr><tr><td>Content-MD5</td><td>返回资源的MD5校验值</td><td><code>Content-MD5: Q2hlY2sgSW50ZWdyaXR5IQ==</code></td></tr><tr><td>Content-Range</td><td>在整个返回体中本部分的字节位置</td><td><code>Content-Range: bytes 21010-47021/47022</code></td></tr><tr><td>Content-Type</td><td>返回内容的MIME类型</td><td><code>Content-Type: text/html; charset=utf-8</code></td></tr><tr><td>Date</td><td>原始服务器消息发出的时间</td><td><code>Date: Tue, 15 Nov 2010 08:12:31 GMT</code></td></tr><tr><td>ETag</td><td>请求变量的实体标签的当前值</td><td><code>ETag: “737060cd8c284d8af7ad3082f209582d”</code></td></tr><tr><td>Expires</td><td>响应过期的日期和时间</td><td><code>Expires: Thu, 01 Dec 2010 16:00:00 GMT</code></td></tr><tr><td>Last-Modified</td><td>请求资源的最后修改时间</td><td><code>Last-Modified: Tue, 15 Nov 2010 12:45:26 GMT</code></td></tr><tr><td>Location</td><td>用来重定向接收方到非请求URL的位置来完成请求或标识新的资源</td><td><code>Location: http://www.zcmhi.com/archives/94.html</code></td></tr><tr><td>Pragma</td><td>包括实现特定的指令，它可应用到响应链上的任何接收方</td><td><code>Pragma: no-cache</code></td></tr><tr><td>Proxy-Authenticate</td><td>它指出认证方案和可应用到代理的该URL上的参数</td><td><code>Proxy-Authenticate: Basic</code></td></tr><tr><td>refresh</td><td>应用于重定向或一个新的资源被创造，在5秒之后重定向（由网景提出，被大部分浏览器支持）</td><td><code>Refresh: 5; url=http://www.zcmhi.com/archives/94.html</code></td></tr><tr><td>Retry-After</td><td>如果实体暂时不可取，通知客户端在指定时间之后再次尝试</td><td><code>Retry-After: 120</code></td></tr><tr><td>Server</td><td>web服务器软件名称</td><td><code>Server: Apache/1.3.27 (Unix) (Red-Hat/Linux)</code></td></tr><tr><td>Set-Cookie</td><td>设置Http Cookie</td><td><code>Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</code></td></tr><tr><td>Trailer</td><td>指出头域在分块传输编码的尾部存在</td><td><code>Trailer: Max-Forwards</code></td></tr><tr><td>Transfer-Encoding</td><td>文件传输编码</td><td><code>Transfer-Encoding:chunked</code></td></tr><tr><td>Vary</td><td>告诉下游代理是使用缓存响应还是从原始服务器请求</td><td><code>Vary: *</code></td></tr><tr><td>Via</td><td>告知代理客户端响应是通过哪里发送的</td><td><code>Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)</code></td></tr><tr><td>Warning</td><td>警告实体可能存在的问题</td><td><code>Warning: 199 Miscellaneous warning</code></td></tr><tr><td>WWW-Authenticate</td><td>表明客户端请求实体应该使用的授权方案</td><td><code>WWW-Authenticate: Basic</code></td></tr></tbody></table><p>《RESTful Web APIs》 看的我云里雾里的，去看《HTTP权威指南》</p>]]></content>
      
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试主题专用</title>
      <link href="/2020/04/03/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2020/04/03/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1111"><a href="#1111" class="headerlink" title="1111"></a>1111</h1><p><img src="shulan.jpg" alt="测试图片"></p><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateReg = <span class="regexp">/^\d&#123;4&#125;(\-)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr1 = <span class="string">&#x27;2021-10-10&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr1)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr2 = <span class="string">&#x27;2021-01-01 1&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(dateReg.test(dateStr2)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles/docco.css&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;highlight.pack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">text</span>=<span class="string">&#x27;#000000&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    hljs.initHighlightingOnLoad();</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">color</span>=<span class="string">&#x27;#dd0000&#x27;</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span> 不符合规范查询数<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">style</span>=<span class="string">&#x27;font-size:14px; text-align:center;&#x27;</span> <span class="attr">border</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">cellspacing</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">align</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">&#x27;#F79646&#x27;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&#x27;width:100px&#x27;</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>SQL<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&#x27;width:200px&#x27;</span>&gt;</span>采集时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;SQL&quot;</span>&gt;</span></span><br><span class="line">  SELECT 1 AS ID, &#x27;张三&#x27; AS NAME, &#x27;2019-01-01&#x27; AS birthday FROM dual UNION ALL </span><br><span class="line">  SELECT 2 AS ID, &#x27;李四&#x27; AS NAME, &#x27;2019-02-01&#x27; AS birthday FROM dual UNION ALL </span><br><span class="line">  SELECT 3 AS ID, &#x27;王五&#x27; AS NAME, &#x27;2019-03-01&#x27; AS birthday FROM dual </span><br><span class="line">  ORDER BY id</span><br><span class="line">        <span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021-02-08 22:26:49<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;SQL&quot;</span>&gt;</span></span><br><span class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">  `system_level_product_id` int(11) NOT NULL COMMENT &#x27;一级产品ID&#x27;,</span><br><span class="line">  `role_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;角色名&#x27;,</span><br><span class="line">  `role_type` int(11) NOT NULL DEFAULT &#x27;1&#x27; COMMENT &#x27;用来区分系统默认管理员角色和后续自定义角色(0:管理员角色，1:用户创建角色，2：后台展示角色)&#x27;,</span><br><span class="line">  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `flag` int(11) DEFAULT NULL,</span><br><span class="line">  `position` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `role_change` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `position001` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `first` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `second01` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  `third` varchar(10) COLLATE utf8mb4_general_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `idx_system_level_product_id` (`system_level_product_id`),</span><br><span class="line">  KEY `idx_role_change` (`role_change`)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>2021-02-08 22:30:43<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-1"><a href="#三级标题-1" class="headerlink" title="三级标题"></a>三级标题</h3><p>这是正文</p><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-2"><a href="#三级标题-2" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-3"><a href="#三级标题-3" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="二级标题-2"><a href="#二级标题-2" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-4"><a href="#三级标题-4" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-5"><a href="#三级标题-5" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-3"><a href="#二级标题-3" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-6"><a href="#三级标题-6" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-7"><a href="#三级标题-7" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="二级标题-4"><a href="#二级标题-4" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-8"><a href="#三级标题-8" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-9"><a href="#三级标题-9" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="二级标题-5"><a href="#二级标题-5" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题-10"><a href="#三级标题-10" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="三级标题-11"><a href="#三级标题-11" class="headerlink" title="三级标题"></a>三级标题</h3><h1 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h1><h1 id="一级标题-3"><a href="#一级标题-3" class="headerlink" title="一级标题"></a>一级标题</h1><p>test husky</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS深入理解(一)</title>
      <link href="/2017/04/16/CSS%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-%E4%B8%80/"/>
      <url>/2017/04/16/CSS%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>本文大部分来源《CSS权威指南》和<a href="http://www.zhangxinxu.com/">张鑫旭</a>大神的部分思想。本文只针对CSS基础。</p><h2 id="快速复习"><a href="#快速复习" class="headerlink" title="快速复习"></a>快速复习</h2><p><strong>正常流</strong></p><p>​    从左到右，从上到下显示，也是我们熟悉的传统的HTML文档布局。</p><p><strong>非替换元素</strong></p><p>​    如果元素的内容包含在文档中，则称为非替换元素。</p><p><strong>替换元素</strong></p><p>​    是指用作为其他内容占位符的一个元素。典型的例子就是<code>img</code>。</p><p><strong>块级元素</strong></p><p>​    这是指段落、标题或者<code>div</code>之类，这些元素在正常流中，会在其框之前和之后生成”<strong>换行</strong>“，所以处于正常流中的块级元素会垂直摆放。</p><p><strong>行内元素</strong></p><p>​    这是指<code>strong</code>或者<code>span</code>之类的元素。这些元素不会在之前和之后生成”<strong>换行</strong>“，它们是块级元素的后代。</p><p><strong>根元素</strong></p><p>​    HTML中就是<code>html</code></p><hr><h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p><img src="block-img.jpeg" alt="块级元素"></p><p>一般的，一个元素的<code>width</code>就是content的宽。<code>height</code>是content的高。</p><h3 id="水平格式化"><a href="#水平格式化" class="headerlink" title="水平格式化"></a>水平格式化</h3><p>首先一个简单的规则，正常流中的块级元素框的水平部分总和就等于父元素的<code>width</code>。</p><p><strong>水平属性</strong>：<code>margin-left</code>、<code>border-left</code>，<code>padding-left</code>，<code>width</code>，<code>padding-right</code>，<code>border-rigth</code>，<code>margin-right</code></p><p>这七个属性的值加起来必须是元素包含块的宽度，往往是父元素的width。</p><p><strong>使用auto</strong>:如果设置margin-left，margin-right，width的一个值为auto，余下的两个值为特定的值，那么设置auto的属性会确定所需的长度，从而使元素框的宽度等于父元素的宽度。举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素的宽为400px*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto; <span class="comment">/*自动计算为200px*/</span></span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果三个都设置了为<strong>非</strong>auto的值，margin-right将强制为auto，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素的宽为400px*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">100px</span>;<span class="comment">/*强制为auto,计算为200px*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果设置width为auto，另外两个为特定的值，width将计算为所需要的值。</p><p><strong>不只一个auto</strong>: width为特定的值，其他两个是auto，其他会计算为相等的长度。所以元素会水平居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素的宽为400px*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto; <span class="comment">/*计算为150px*/</span></span><br><span class="line">    <span class="attribute">margin-right</span>: auto;<span class="comment">/*计算为150px*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将某个外边距以及width设置为auto，设置为auto的外边距将计算为<strong>0</strong>，width会填充父元素，例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素的宽为400px*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto; <span class="comment">/*计算为0*/</span></span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto; <span class="comment">/*计算为300px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果三个都为auto会怎么样，很简单，这是默认情况。外边距都为0，width会填充父元素。</p><p><strong>注意：</strong>水平边距不会合并。</p><p><strong>负外边距：</strong>外边距可以为负值。举个例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父元素的宽为400px*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto; <span class="comment">/*440px*/</span></span><br><span class="line">  <span class="comment">/*10px + 0 + 0 + 440px + 0 + 0 -50px = 400px*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：内边距，边框，宽度不能为负数。只有外边距。</p><p><strong>百分数：</strong>width，内外边距设置为百分数，会应用相同的基本规则。百分数的计算根据父元素的宽度。</p><p><strong>替换元素：</strong>非替换元素的所有规则适用于替换元素，只有一个例外，如果width为auto，元素的宽度将为内容的固有宽度。如果设置width为特定的值，height会成比例的变化。</p><h3 id="垂直格式化"><a href="#垂直格式化" class="headerlink" title="垂直格式化"></a>垂直格式化</h3><p>一个元素的默认高度由其内容决定。可以显示的设置高度，指定高度小于显示的内容所需的高度，浏览器的具体行为取决于overflow的值。其他的特别情况，稍后讨论。</p><p><strong>垂直属性：</strong><code>margin-top</code>，<code>border-top</code>，<code>padding-top</code>，<code>height</code>，<code>padding-bottom</code>，<code>border-bottom</code>，<code>margin-bottom</code></p><p>这七个属性的值加起来必须是元素包含块的高度，往往是父元素的height。</p><p>在正常流中，如果一个块元素的margin-top，margin-bottom设置为auto它会自动计算为0。也就不能垂直居中。</p><p><strong>百分数：</strong>height的值为百分数，根据父元素的高度计算。内外边距根据父元素的<strong>宽度</strong>计算。</p><p><strong>垂直外边距重叠：</strong>垂直相邻的外边距将会合并，举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而列表之间距离是15px，不是25px。垂直相邻的外边距中，较小的会被较大的合并。</p><p>注意：重叠不止发生于相邻的同级的元素。还会发生在父子元素之间。父元素如果有padding，和border将不会重叠，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">  margin-top:10px;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">  margin-top:15px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ul的外边距将为：15px。</p><p><strong>负外边距</strong>：如果重叠时，两个元素都为负值，取绝对值最大的。一正一负，正减去负的绝对值。</p><hr><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>首先回顾一些行内布局的基本术语。</p><p><strong>匿名文本：</strong>是指所有未包含在行内元素中的字符串，例如<code>&lt;p&gt;I am &lt;em&gt;so&lt;/em&gt; happy&lt;/p&gt;</code>,I am 和 happy就是匿名文本。</p><p><strong>em框：</strong>也称为字符框，<code>font-size</code>的值确定各个em框的高度。</p><p><strong>内容框：</strong>在非替换元素中就是em框。在替换元素中，内容区就是元素的固有高度加上可能有的外边距。</p><p><strong>行间距：</strong><code>font-size</code>和<code>line-height</code>的差。行间距只应用于非替换元素。</p><p><strong>行内框：</strong>内容区增加间距来描述，对于非替换元素，元素行内框的高度刚好等于line-height的值。对于替换元素，元素行内框的高度恰好等于内容区高度。</p><p><strong>行框：</strong>包含该行中出现的行内框的最高点和最低点的最小框。</p><p>注意：非替换元素的内外边距对行内元素或者其生成的框没有垂直效果，也就是说他们不会影响元素行内框的高度。替换元素就会影响。</p><h3 id="行内非替换元素"><a href="#行内非替换元素" class="headerlink" title="行内非替换元素"></a>行内非替换元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">  line-heigth: 21px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1490230862_141364665.png" alt="行内非替换元素"></p><p>假如有以下标记:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;font-size: 12px; line-height: 12px;&quot;&gt;</span><br><span class="line">This is text, &lt;em&gt;some of which is emphasized&lt;/em&gt;, plus other text&lt;br&gt;</span><br><span class="line">which is &lt;strong style=&quot;font-size: 24px;&quot;&gt;strongly emphasized&lt;/strong&gt;</span><br><span class="line">and which is&lt;br&gt;</span><br><span class="line">larger than the surrounding text.</span><br><span class="line">&lt;/p&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在本例中,所有的<code>line-height</code>都是12px,虽然<code>strong</code>指定为24px,但是根据<code>line-height</code>的可继承性,<code>strong</code>的<code>line-height</code>也是12px，对于<code>font-size</code>和<code>line-height</code>都是12px的每段文本,内容高度不会改变,所以行内盒的高度是12px.但是,对于<code>strong</code>文本,<code>line-height</code>和<code>font-size</code>的差是<code>-12px</code>.这个差分成两半确定半间距,然后半间距分别加到内容高度的上、下部,就得到行内盒.</p><p>因为行间距是负数,所以内容区域会比行内盒大</p><p>由于行内盒决定了整个行盒的高度,其相互位置是很重要的.行盒被定义为行中最高的行内盒的顶端到最低的行内盒的底部之间的距离,并且每个行盒的顶部挨着上一行的行盒的底部</p><p>下图中,匿名文本的行内盒决定了行盒的底部,同时,<code>strong</code>元素的行内盒的顶部则设置行盒的顶部.</p><p>因为行内盒的顶部是在<code>strong</code>元素的内容区内,所以该元素的内容就溢出到行盒的外面,从而实际上与其它行盒重叠了</p><p><img src="1490230863_790549303.png" alt="img"></p><h4 id="line-heigth"><a href="#line-heigth" class="headerlink" title="line-heigth"></a>line-heigth</h4><p>单位可以是固定的<code>px</code>，也可以是相对的<code>em</code>和百分数，是相对于<code>font-size</code>计算。</p><p>在继承问题中，当一个元素从其父元素继承<code>line-height</code>时，值是从父元素计算，而不是子元素计算。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123; <span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123; <span class="attribute">line-height</span>: <span class="number">1em</span>;&#125;<span class="comment">/*计算为10px*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>;&#125; <span class="comment">/*line-height计算为10px*/</span></span><br></pre></td></tr></table></figure><p>可以指定一个数，由它设置缩放因子。子元素会根据自己的<code>font-size</code>计算。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123; <span class="attribute">font-size</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123; <span class="attribute">line-height</span>: <span class="number">1</span>;&#125;<span class="comment">/*计算为10px*/</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>;&#125; <span class="comment">/*line-height计算为18px*/</span></span><br></pre></td></tr></table></figure><h4 id="增加框属性"><a href="#增加框属性" class="headerlink" title="增加框属性"></a>增加框属性</h4><p>内外边距和边框不会影响行框的高度。</p><p>行内元素的边框是由<code>font-size</code>控制的而不是<code>line-height</code>。例如：<code>span</code>元素的的<code>font-size:12px</code>，<code>line-height:36px</code>，其内容区域就是<code>12px</code>高，边框包围该内容区域。</p><p>设置左右外边距会将文本推离其左右两端。为负数则会拉近。</p><h3 id="行内替换元素"><a href="#行内替换元素" class="headerlink" title="行内替换元素"></a>行内替换元素</h3><p>一般认为行内替换元素有固有的高度和宽度。比如图片。但是不会影响任何元素的<code>line-height</code>。行框高度会恰好包含替换元素。</p><h4 id="增加框属性-1"><a href="#增加框属性-1" class="headerlink" title="增加框属性"></a>增加框属性</h4><p>内外边距和边框会影响行框的高度。</p><hr><h2 id="说回margin-padding"><a href="#说回margin-padding" class="headerlink" title="说回margin,padding"></a>说回<code>margin,padding</code></h2><p>不强调常规的用法，在这里的强调的是当设置的值为<strong>百分数</strong>时候，不论左右上下，统统根据父元素的<code>width</code>计算。例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10%</span>;<span class="comment">/*计算为 40px,40px,40px,40px*/</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="关于浮动"><a href="#关于浮动" class="headerlink" title="关于浮动"></a>关于浮动</h2><p>简单说一下容易忽略的细节。</p><p>浮动元素会生成一个块级框，而不论这个元素本身是什么。</p><p>类似这样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会使父容器高度塌陷为0，可以这样清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数式编程(四)</title>
      <link href="/2017/04/06/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%9B%9B/"/>
      <url>/2017/04/06/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p>无类编程-数据导向</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyChain</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> calls = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">invoke</span>: <span class="function"><span class="keyword">function</span>(<span class="params">methodName <span class="comment">/*, args*/</span> </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">            calls.push(<span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> meth = target[methodName];</span><br><span class="line">                <span class="keyword">return</span> meth.apply(target, args);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">force</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> _.reduce(calls, <span class="function"><span class="keyword">function</span>(<span class="params">ret, thunk</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> thunk(ret);</span><br><span class="line">            &#125;, obj)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deferredSort</span>(<span class="params">ary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> LazyChain(ary).invoke(<span class="string">&quot;sort&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">force</span>(<span class="params">thunk</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> thunk.force();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> deferredSorts = _.map([[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>]],deferredSort);</span><br><span class="line">_.map(deferredSorts,force)</span><br><span class="line"><span class="comment">/*[[1,2,3],[1,7,7],[0,5,9]]*/</span></span><br></pre></td></tr></table></figure><p>添加一个验证函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validateTriples = validator(</span><br><span class="line">    <span class="string">&quot;Each array should have three elemetns&quot;</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">arrays</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _.every(arrays, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.length === <span class="number">3</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validateTriplesStore = partial1(condition1(validateTriples), _.identity);</span><br><span class="line">validateTriplesStore([[<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">7</span>,<span class="number">7</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">9</span>,<span class="number">5</span>]]);</span><br></pre></td></tr></table></figure><p>组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postProcess</span>(<span class="params">arrays</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.map(arrays,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e[<span class="number">1</span>];</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processTriples</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pipeline(</span><br><span class="line">        date</span><br><span class="line">        , <span class="built_in">JSON</span>.parse</span><br><span class="line">        , validateTriplesStore</span><br><span class="line">        , deferredSort</span><br><span class="line">        , force</span><br><span class="line">        , postProcess</span><br><span class="line">        , invoker(<span class="string">&quot;sort&quot;</span>, <span class="built_in">Array</span>.prototype.sort)</span><br><span class="line">        ,<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> o</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">processTriples(<span class="string">&quot;[[2,1,3],[7,7,1],[0,9,5]]&quot;</span>)</span><br><span class="line"><span class="comment">/*[1, 7, 9]*/</span></span><br></pre></td></tr></table></figure><p>Mixins</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringifyArray</span>(<span class="params">ary</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;[&quot;</span>, _.map(ary, poloToString).join(<span class="string">&quot;,&quot;</span>), <span class="string">&quot;]&quot;</span>].join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> poloToString = dispatch(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;<span class="keyword">return</span> _.isString(s) ? s : <span class="literal">undefined</span>&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;<span class="keyword">return</span> _.isArray(s) ? stringifyArray(s) : <span class="literal">undefined</span>&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;<span class="keyword">return</span> _.isObject(s) ? <span class="built_in">JSON</span>.stringify(s) : <span class="literal">undefined</span>&#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;<span class="keyword">return</span> s.toString()&#125;</span><br><span class="line">    );</span><br><span class="line">poloToString(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">poloToString([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">poloToString(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>使用Mixin扁平化结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*mixin*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Container</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._value = val;</span><br><span class="line">    <span class="built_in">this</span>.init(val);</span><br><span class="line">&#125;</span><br><span class="line">Container.prototype.init = _.identity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> HoleMixin = &#123;</span><br><span class="line">    <span class="attr">setValue</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oldValue = <span class="built_in">this</span>._value;</span><br><span class="line">        <span class="built_in">this</span>.validate(newValue);</span><br><span class="line">        <span class="built_in">this</span>._value = newValue;</span><br><span class="line">        <span class="built_in">this</span>.notify(oldValue, newValue);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._value;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> Hole = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    Container.call(<span class="built_in">this</span>, val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ObserverMixin = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _watchers = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">watch</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">            _watchers.push(fun);</span><br><span class="line">            <span class="keyword">return</span> _.size(_watchers);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span>(<span class="params">oldValue, newValue</span>) </span>&#123;</span><br><span class="line">            _.each(_watchers, <span class="function"><span class="keyword">function</span>(<span class="params">watcher</span>) </span>&#123;</span><br><span class="line">                watcher.call(<span class="built_in">this</span>, oldValue, newValue);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> _.size(_watchers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> ValidateMixin = &#123;</span><br><span class="line">    <span class="attr">addValidator</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>._validator = fun;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.validate(val);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">validate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (existy(<span class="built_in">this</span>._validator) &amp;&amp; !<span class="built_in">this</span>._validator(val)) &#123;</span><br><span class="line">            fail(<span class="string">&quot;Attempted to set invalid value &quot;</span> + poloToString(val));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_.extend(Hole.prototype, HoleMixin, ValidateMixin, ObserverMixin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Hole(<span class="number">42</span>);</span><br><span class="line">h.addValidator(always(<span class="literal">false</span>))</span><br><span class="line">h.setValue(<span class="number">9</span>)</span><br><span class="line"><span class="comment">/*Attempted to set invalid value 9*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Hole(<span class="number">42</span>);</span><br><span class="line">h.addValidator(isEven);</span><br><span class="line">h.setValue(<span class="number">9</span>)</span><br><span class="line"><span class="comment">/*Attempted to set invalid value 9*/</span></span><br><span class="line">h.setValue(<span class="number">108</span>)</span><br><span class="line"><span class="comment">/*108*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过混合成一个新的数据结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SwapMixin = &#123;</span><br><span class="line">    <span class="attr">swap</span>: <span class="function"><span class="keyword">function</span>(<span class="params">fun <span class="comment">/*, args*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> newValue = fun.apply(<span class="built_in">this</span>, construct(<span class="built_in">this</span>.value, args));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.setValue(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SnapshotMixin = &#123;</span><br><span class="line">    <span class="attr">snapshot</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deepClone(<span class="built_in">this</span>._value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_.extend(Hole.prototype, HoleMixin, ValidateMixin, ObserverMixin, SwapMixin, SnapshotMixin);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> Hole(<span class="number">42</span>)</span><br><span class="line">h.snapshot()</span><br><span class="line"><span class="comment">/*42*/</span></span><br><span class="line">h.swap(always(<span class="number">99</span>));</span><br><span class="line">h.snapshot()</span><br><span class="line"><span class="comment">/*99*/</span></span><br></pre></td></tr></table></figure><p>实现一个新的类型CAS</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CAS = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    Hole.call(<span class="built_in">this</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> CASMixin = &#123;</span><br><span class="line">    <span class="attr">swap</span>: <span class="function"><span class="keyword">function</span>(<span class="params">oldVal, f</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>._value === oldVal)&#123;</span><br><span class="line">            <span class="built_in">this</span>.setValue(f(<span class="built_in">this</span>._value));</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>._value;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">_.extend(CAS.prototype, HoleMixin, ValidateMixin, ObserverMixin, SwapMixin, CASMixin, SnapshotMixin);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> CAS(<span class="number">42</span>);</span><br><span class="line">c.swap(<span class="number">42</span>, always(-<span class="number">1</span>));</span><br><span class="line">c.snapshot()</span><br><span class="line"><span class="comment">/*-1*/</span></span><br></pre></td></tr></table></figure><p>方法是低级别的操作，将上列操作封装成函数式API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contain</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Container(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hole</span>(<span class="params">val <span class="comment">/*, validator*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = <span class="keyword">new</span> Hole();</span><br><span class="line">    <span class="keyword">var</span> v = _.toArray(<span class="built_in">arguments</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(v)&#123;</span><br><span class="line">        h.addValidator(v);</span><br><span class="line">    &#125;</span><br><span class="line">    h.setValue(val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> swap = invoker(<span class="string">&quot;swap&quot;</span>, Hole.prototype.swap)</span><br><span class="line"><span class="keyword">var</span> x = hole(<span class="number">42</span>);</span><br><span class="line">swap(x, sqr); <span class="comment">/*1764*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cas</span>(<span class="params">val <span class="comment">/*,args*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> h = hole.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">new</span> CAS(val);</span><br><span class="line">    c._validator = h._validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compareAndSwap = invoker(<span class="string">&quot;swap&quot;</span>, CAS.prototype.swap);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">snapshot</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o.snapshot();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addWatcher</span>(<span class="params">o, fun</span>)</span>&#123;</span><br><span class="line">    o.watch(fun);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = hole(<span class="number">42</span>);</span><br><span class="line">addWatcher(x, note);</span><br><span class="line">swap(x, sqr)</span><br><span class="line"><span class="comment">/*1764*/</span></span><br><span class="line"><span class="keyword">var</span> y = cas(<span class="number">9</span>, isOdd);</span><br><span class="line">compareAndSwap(y, <span class="number">9</span>, always(<span class="number">1</span>))</span><br><span class="line"><span class="comment">/*1*/</span></span><br><span class="line">snapshot(y)</span><br><span class="line"><span class="comment">/*1*/</span></span><br></pre></td></tr></table></figure><p>完</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数式编程(三)</title>
      <link href="/2017/04/06/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%B8%89/"/>
      <url>/2017/04/06/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p>利用递归可以创建几个工具函数</p><p>andify 传入的所有的参数满足所有条件才返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">andify</span>(<span class="params"><span class="comment">/* preds */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> preds = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/* args */</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> everything = <span class="function"><span class="keyword">function</span>(<span class="params">ps, truth</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(_.isEmpty(ps))&#123;</span><br><span class="line">                <span class="keyword">return</span> truth;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _.every(args, _.first(ps))</span><br><span class="line">                    &amp;&amp; everything(_.rest(ps), truth)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> everything(preds, <span class="literal">true</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> evenNums = andify(_.isNumber, isEven);</span><br><span class="line">evenNums(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">/*false*/</span></span><br><span class="line">evenNums(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>); <span class="comment">/*true*/</span></span><br></pre></td></tr></table></figure><p>orify是：传入的参数满足一个条件即为真</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orify</span>(<span class="params"><span class="comment">/* preds */</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> preds = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/* args */</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> something = <span class="function"><span class="keyword">function</span>(<span class="params">ps, truth</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(_.isEmpty(ps))&#123;</span><br><span class="line">                <span class="keyword">return</span> truth;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> _.some(args, _.first(ps))</span><br><span class="line">                    || something(_.rest(ps), truth)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> something(preds, <span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !isEven(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zeroOrOdd = orify(isOdd,zero);</span><br><span class="line"></span><br><span class="line">zeroOrOdd();<span class="comment">/*false*/</span></span><br><span class="line">zeroOrOdd(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>);<span class="comment">/*true*/</span></span><br><span class="line">zeroOrOdd(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>); <span class="comment">/*false*/</span></span><br></pre></td></tr></table></figure><p>利用相互递归创建拉平函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_.isArray(array))&#123;</span><br><span class="line">        <span class="keyword">return</span> cat.apply(cat,_.map(array, flat))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [array]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flat([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]) <span class="comment">/*[1, 2, 3, 4]*/</span></span><br><span class="line">flat([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[[[<span class="number">5</span>]]]]) <span class="comment">/*[1, 2, 3, 4, 5]*/</span></span><br></pre></td></tr></table></figure><p>利用递归深度克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!existy(obj) || !_.isObject(obj))&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="keyword">new</span> obj.constructor();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">            temp[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = [&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="attr">b</span>:<span class="number">42</span>&#125;,&#123;<span class="attr">c</span>:&#123;<span class="attr">d</span>:[]&#125;&#125;];</span><br><span class="line"><span class="keyword">var</span> y = deepClone(x);</span><br><span class="line">_.isEqual(x, y); <span class="comment">/*true*/</span></span><br><span class="line"></span><br><span class="line">y[<span class="number">1</span>][<span class="string">&#x27;c&#x27;</span>][<span class="string">&#x27;d&#x27;</span>] = <span class="number">4</span>;</span><br><span class="line">_.isEqual(x, y); <span class="comment">/*false*/</span></span><br></pre></td></tr></table></figure><p>遍历一个嵌套数组的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params">mapFun, resultFun, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_.isArray(array)) &#123;</span><br><span class="line">        <span class="comment">/* mapFun 会对每个元素处理，resultFun处理最后的数组*/</span></span><br><span class="line">        <span class="keyword">return</span> resultFun(_.map(array, mapFun))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*直接处理*/</span></span><br><span class="line">        <span class="keyword">return</span> resultFun(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">visit(_.identity, _.isNumber, <span class="number">42</span>); <span class="comment">/*true*/</span></span><br><span class="line">visit(_.isNumber, _.identity, [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">null</span>, <span class="number">3</span>]); <span class="comment">/*[true, true, false, true]*/</span></span><br><span class="line">visit(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> n*<span class="number">2</span>&#125;,rev,_.range(<span class="number">10</span>)); <span class="comment">/*[18, 16, 14, 12, 10, 8, 6, 4, 2, 0]*/</span></span><br></pre></td></tr></table></figure><p>生成器，ES6也有</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">seed, current, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">head</span>: current(seed),</span><br><span class="line">        <span class="attr">tail</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;forced&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> generator(step(seed), current, step)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*操作生成器函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genHead</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gen.head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genTail</span>(<span class="params">gen</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gen.tail();<span class="comment">/*被强制执行*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ints = generator(<span class="number">0</span>, _.identity, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;<span class="keyword">return</span> n + <span class="number">1</span>;&#125;);</span><br><span class="line">genHead(ints); <span class="comment">/*0*/</span></span><br><span class="line">genTail(ints); <span class="comment">/*生成新的*/</span></span><br><span class="line"><span class="comment">/*&#123;head: 1, tail: function&#125;*/</span></span><br></pre></td></tr></table></figure><p>建立一个更大的存取函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*蹦床函数,如果结果为function，会自动执行他*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">fun<span class="comment">/* , args*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = fun.apply(fun, _.rest(<span class="built_in">arguments</span>));</span><br><span class="line">    <span class="keyword">while</span>(_.isFunction(result))&#123;</span><br><span class="line">        result = result();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTake</span>(<span class="params">n, gen</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> doTake = <span class="function"><span class="keyword">function</span>(<span class="params">x, g, ret</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> partial(doTake,x-<span class="number">1</span>,genTail(g),cat(ret,genHead(g)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> trampoline(doTake, n, gen, [])</span><br><span class="line">&#125;</span><br><span class="line">getTake(<span class="number">10</span>, ints);<span class="comment">/*[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]*/</span></span><br></pre></td></tr></table></figure><p>链式调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*惰式调用*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LazyChain</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._calls = [];</span><br><span class="line">    <span class="built_in">this</span>._target = obj;</span><br><span class="line">&#125;</span><br><span class="line">LazyChain.prototype.invoke = <span class="function"><span class="keyword">function</span>(<span class="params">methodName <span class="comment">/*, args*/</span> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="built_in">this</span>._calls.push(<span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> meth = target[methodName];</span><br><span class="line">        <span class="keyword">return</span> meth.apply(target, args);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">LazyChain.prototype.force = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.reduce(<span class="built_in">this</span>._calls, <span class="function"><span class="keyword">function</span>(<span class="params">target, thunk</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> thunk(target);</span><br><span class="line">    &#125;, <span class="built_in">this</span>._target)</span><br><span class="line">&#125;</span><br><span class="line">LazyChain.prototype.tap = <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._calls.push(<span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">        fun(target);</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> LazyChain([<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]).invoke(<span class="string">&#x27;sort&#x27;</span>).tap(<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o);<span class="comment">/*[1, 2, 3]*/</span></span><br><span class="line">&#125;).invoke(<span class="string">&#x27;join&#x27;</span>,<span class="string">&#x27; &#x27;</span>).force()</span><br><span class="line"><span class="comment">/*&quot;1 2 3&quot;*/</span></span><br></pre></td></tr></table></figure><p>管道</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pipeline</span>(<span class="params">seed <span class="comment">/*, args*/</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.reduce(_.rest(<span class="built_in">arguments</span>)</span><br><span class="line">    ,<span class="function"><span class="keyword">function</span>(<span class="params">l, r</span>)</span>&#123;<span class="keyword">return</span> r(l)&#125;</span><br><span class="line">    ,seed)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fifth</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> pipeline(a</span><br><span class="line">    ,_.rest</span><br><span class="line">    ,_.rest</span><br><span class="line">    ,_.rest</span><br><span class="line">    ,_.rest</span><br><span class="line">    ,_.first</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">fifth([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment">/*5*/</span></span><br></pre></td></tr></table></figure><p>使用action组合规范</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actions</span>(<span class="params">acts, done</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">seed</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> init = &#123; <span class="attr">values</span>: [], <span class="attr">state</span>: seed &#125;;</span><br><span class="line">        <span class="keyword">var</span> intermediate = _.reduce(acts, <span class="function"><span class="keyword">function</span>(<span class="params">stateObj, action</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = action(stateObj.state);</span><br><span class="line">            <span class="keyword">var</span> values = cat(stateObj.values, [result.answer]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">values</span>: values, <span class="attr">state</span>: result.state &#125;;</span><br><span class="line">        &#125;, init);</span><br><span class="line">        <span class="keyword">var</span> keep = _.filter(intermediate.values, existy);</span><br><span class="line">        <span class="keyword">return</span> done(keep, intermediate.state);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lift</span>(<span class="params">answerFun, stateFun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> <span class="comment">/* args */</span> </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ans = answerFun.apply(<span class="literal">null</span>, construct(state, args));</span><br><span class="line">            <span class="keyword">var</span> s = stateFun ? stateFun(state) : ans;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">answer</span>: ans, <span class="attr">state</span>: s &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模拟栈操作*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> push = lift(<span class="function"><span class="keyword">function</span>(<span class="params">stack, e</span>)</span>&#123;<span class="keyword">return</span> construct(e, stack)&#125;);</span><br><span class="line"><span class="keyword">var</span> pop = lift(_.first, _.rest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stackAction = actions([</span><br><span class="line">    push(<span class="number">1</span>),</span><br><span class="line">    push(<span class="number">2</span>),</span><br><span class="line">    pop()],</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">values, state</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> values;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">stackAction([])</span><br><span class="line"><span class="comment">/*[[1], [2, 1], 2]*/</span></span><br></pre></td></tr></table></figure><p>和其他函数组合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pipeline(</span><br><span class="line">        [], stackAction, _.chain</span><br><span class="line">    )</span><br><span class="line">    .each(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(elem)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数式编程(二)</title>
      <link href="/2017/04/02/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%BA%8C/"/>
      <url>/2017/04/02/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p>接上回</p><p>自动柯里化参数的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fun</span>)</span>&#123; <span class="comment">/*柯里化一个参数*/</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun(arg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry2</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">secondArg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">firstArg</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> fun(firstArg, secondArg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>柯里化三个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry3</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">last</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">middle</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">first</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fun(first,middle,last)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用curry3实现特定色彩生成HTML十六进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toHex</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hex = n.toString(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> (hex.length &lt; <span class="number">2</span>) ? [<span class="number">0</span>, hex].join(<span class="string">&#x27;&#x27;</span>) : hex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHexString</span>(<span class="params">r, g, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&quot;#&quot;</span>, toHex(r), toHex(g), toHex(b)].join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> blueGreenish = curry3(rgbToHexString)(<span class="number">255</span>)(<span class="number">200</span>);</span><br><span class="line">blueGreenish(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>柯里化一次只能消耗一个参数，<strong>部分应用</strong>可以消耗多个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial1</span>(<span class="params">fun, arg1</span>) </span>&#123; <span class="comment">/*消耗一个参数*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/*args*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = construct(arg1, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fun.apply(fun, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial2</span>(<span class="params">fun, arg1, arg2</span>) </span>&#123; <span class="comment">/*消耗两个参数*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/*args*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = cat([arg1, arg2], <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fun.apply(fun, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">n, d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n / d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> over10Part1 = partial1(div, <span class="number">10</span>);</span><br><span class="line">over10Part1(<span class="number">5</span>); <span class="comment">/*2*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> over10Part2 = partial2(div, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">over10Part2(); <span class="comment">/*2*/</span></span><br></pre></td></tr></table></figure><p>部分应用任意数量的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partial</span>(<span class="params">fun <span class="comment">/* , pargs*/</span></span>) </span>&#123; <span class="comment">/*消耗一个或者多个参数*/</span></span><br><span class="line">    <span class="keyword">var</span> pargs = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/*arguments*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = cat(pargs, _.toArray(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> fun.apply(fun, args)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> over10Partial = partial(div, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line">over10Partial(); <span class="comment">/*2*/</span></span><br></pre></td></tr></table></figure><p>利用<strong>bind</strong>也可以实现上述作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partialUseBind</span>(<span class="params">fun <span class="comment">/*,pargs*/</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun.bind.apply(fun,_.toArray(<span class="built_in">arguments</span>))</span><br><span class="line">&#125;</span><br><span class="line">partialUseBind(div,<span class="number">10</span>,<span class="number">5</span>)() <span class="comment">/*2*/</span></span><br></pre></td></tr></table></figure><p>局部应用实战</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">message, fun</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/*args*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun.apply(fun, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="string">&#x27;message&#x27;</span>] = message;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zero = validator(<span class="string">&#x27;cannot be zero&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> === n;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> number = validator(<span class="string">&#x27;arg nust be a number&#x27;</span>, _.isNumber);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqr</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!number(n)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(number.message);</span><br><span class="line">    <span class="keyword">if</span>(zero(n)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(zero.message);</span><br><span class="line">    <span class="keyword">return</span> n*n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqr(<span class="number">10</span>); <span class="comment">/*100*/</span></span><br><span class="line">sqr(<span class="number">0</span>); <span class="comment">/*cannot be zero*/</span></span><br><span class="line">sqr(<span class="string">&#x27;&#x27;</span>); <span class="comment">/*arg nust be a number*/</span></span><br></pre></td></tr></table></figure><p>可以将验证和计算分离，分为前置条件和后置条件</p><p>前置条件：函数的调用者的担保</p><p>后置条件：前置条件成立，保证函数的结果</p><p>看代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*前置条件*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">condition1</span>(<span class="params"><span class="comment">/*validators*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> validators = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">fun, arg</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> errors = mapcat(<span class="function"><span class="keyword">function</span>(<span class="params">isValid</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isValid(arg) ? [] : [isValid.message];</span><br><span class="line">        &#125;,validators);</span><br><span class="line">        <span class="keyword">if</span>(!_.isEmpty(errors))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errors.join(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fun(arg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*翻转结果*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complement</span>(<span class="params">PRED</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !PRED.apply(PRED, _.toArray(<span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sqrPre = condition1(</span><br><span class="line">        validator(<span class="string">&quot;arg must not be zero&quot;</span>, complement(zero)),</span><br><span class="line">        validator(<span class="string">&quot;arg must be a number&quot;</span>, _.isNumber)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">sqrPre(_.identity, <span class="number">10</span>); <span class="comment">/*10*/</span></span><br><span class="line">sqrPre(_.identity, <span class="string">&quot;&quot;</span>); <span class="comment">/*arg must be a number*/</span></span><br><span class="line">sqrPre(_.identity, <span class="number">0</span>);<span class="comment">/*arg must not be zero*/</span></span><br></pre></td></tr></table></figure><p>利用已经有工具组合计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncheckSqr</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> n*n&#125;</span><br><span class="line">uncheckSqr(<span class="string">&quot;&quot;</span>); <span class="comment">/*0 显然错误*/</span></span><br><span class="line"><span class="keyword">var</span> checkSqr = partial1(sqrPre,uncheckSqr);</span><br><span class="line">checkSqr(<span class="number">10</span>); <span class="comment">/*100*/</span></span><br><span class="line">checkSqr(<span class="string">&quot;&quot;</span>) <span class="comment">/*arg must be a number*/</span></span><br></pre></td></tr></table></figure><p>分离了计算和有效性验证，可以灵活地扩展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEven</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (n%<span class="number">2</span>) === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sillySquare = partial1(</span><br><span class="line">    condition1(validator(<span class="string">&quot;should be even&quot;</span>, isEven)),</span><br><span class="line">    checkSqr</span><br><span class="line">    );</span><br><span class="line">sillySquare(<span class="number">11</span>) <span class="comment">/*should be even*/</span></span><br></pre></td></tr></table></figure><p>组合端到端的<strong>拼接函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">not</span>(<span class="params">x</span>)</span>&#123;<span class="keyword">return</span> !x&#125;</span><br><span class="line"><span class="keyword">var</span> isntString = _.compose(not, _.isString)</span><br><span class="line">isntString([]); <span class="comment">/*true*/</span></span><br></pre></td></tr></table></figure><p>可以重新定义mapcat</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*将传入的参数可以转为数组模式*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splat</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun.apply(<span class="literal">null</span>,array)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> composeMapcat = _.compose(splat(cat),_.map)</span><br><span class="line">composeMapcat([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>]);<span class="comment">/*[1, 2, 3, 4, 5]*/</span></span><br></pre></td></tr></table></figure><p>利用拼接函数可以组合前置和后置条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greateThan = curry2(<span class="function"><span class="keyword">function</span>(<span class="params">lhs, rhs</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> lhs &gt; rhs;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sqrPost = condition1(</span><br><span class="line">        validator(<span class="string">&quot;result should be a number&quot;</span>, _.isNumber),</span><br><span class="line">        validator(<span class="string">&quot;result should not be zero&quot;</span>, complement(zero)),</span><br><span class="line">        validator(<span class="string">&quot;result should be positive&quot;</span>, greateThan(<span class="number">0</span>))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> megaCheckSqr = _.compose(partial(sqrPost,_.identity),checkSqr);</span><br><span class="line">megaCheckSqr(<span class="literal">NaN</span>); <span class="comment">/*result should be positive*/</span></span><br></pre></td></tr></table></figure><p>一切后置条件的失败都永远是函数的提供者的错。</p><p>待续</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript函数式编程(一)</title>
      <link href="/2017/03/28/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%B8%80/"/>
      <url>/2017/03/28/JavaScript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>为什么要用函数式，因为爽！！！！<br><a href="https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details">JS函数式编程指南</a><br><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01264FOY4/ref=sr_1_1?ie=UTF8&qid=1490667646&sr=8-1&keywords=javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B">JavaScript函数式编程</a><br>两本不一样<br><a href="http://underscorejs.org/">underscorejs</a><br>确保理解JavaScript的闭包和作用域</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>明白下面概念</p><ol><li>JavaScript中纯函数是一等公民<br> 什么叫做<strong>纯函数</strong> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;a,b)</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">/*3*/</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">/*3*/</span></span><br></pre></td></tr></table></figure> 纯函数是指<strong>不依赖且不改变它作用域之外的变量状态</strong>的函数。下面的是非纯函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addWithC</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line">addWithC(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">/*4*/</span></span><br><span class="line">c = <span class="number">2</span></span><br><span class="line">addWith(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">/*5*/</span></span><br></pre></td></tr></table></figure> 为什么说js中函数是一等公民<br> 函数可以作为变量、数组元素、对象成员、作为参数、作为return 对象，可以去任何值的地方，所以是一等的公民。</li><li>高阶函数<br> 以一个函数作为参数，以一个函数作为返回结果就为<strong>高阶函数</strong>。 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addWithC</span>(<span class="params">fn, a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.call(<span class="built_in">this</span>,a, b) + c</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">addWithC(add,<span class="number">1</span>,<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">/*6*/</span></span><br></pre></td></tr></table></figure></li><li>柯里化<br> 将多个参数的函数转变为接受单一参数的函数 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> addWith10 = (<span class="function"><span class="keyword">function</span> <span class="title">addWith10</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add.call(<span class="built_in">this</span>,<span class="number">10</span>, a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line">addWith10(<span class="number">1</span>) <span class="comment">/*11*/</span></span><br><span class="line">addWith10(<span class="number">2</span>) <span class="comment">/*12*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>有了基本概念就可以开始实战了<br>定义几个输出信息的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">thing</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(thing)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warn</span>(<span class="params">thing</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.warn([<span class="string">&quot;WARNING:&quot;</span>, thing].join(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">note</span>(<span class="params">thing</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([<span class="string">&quot;NOTE:&quot;</span>, thing].join(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义两个常用函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*检查值是否为null和undefined*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">existy</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> x != <span class="literal">null</span>&#125;</span><br><span class="line"><span class="comment">//判断x是否被认为是true的同义词</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truthy</span>(<span class="params">x</span>)</span>&#123; <span class="keyword">return</span> (x !== <span class="literal">false</span> &amp;&amp; existy(x))&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">false</span>,<span class="literal">undefined</span>].map(existy)</span><br><span class="line"><span class="comment">/*[true, false, true, false]*/</span></span><br><span class="line">[<span class="number">1</span>,<span class="literal">null</span>,<span class="literal">false</span>,<span class="literal">undefined</span>].map(truthy)</span><br><span class="line"><span class="comment">/*[true, false, false, false]*/</span></span><br></pre></td></tr></table></figure><p>那么就可以代替以下操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(condition)</span><br><span class="line">    <span class="keyword">return</span> _.isFunction(doSomething) ? doSomething() : doSomething;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doWhen</span>(<span class="params">cond, action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(truthy(cond))</span><br><span class="line">    <span class="keyword">return</span> action();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回常量的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">always</span>(<span class="params">VALUE</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VALUE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line">f() === f() <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在来几个基本函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> head = _.first(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">if</span>(existy(head))&#123;</span><br><span class="line">    <span class="keyword">return</span> head.concat.apply(head, _.rest(<span class="built_in">arguments</span>));</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">cat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment">/*[1, 2, 3, 4, 5, 6, 7, 8, 9]*/</span></span><br><span class="line"><span class="comment">/*第一个*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">construct</span>(<span class="params">head, tail</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cat([head], _.toArray(tail))</span><br><span class="line">&#125;</span><br><span class="line">construct(<span class="number">42</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">/*[42, 1, 2, 3]*/</span></span><br><span class="line"><span class="comment">/*第二个*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapcat</span>(<span class="params">fun, coll</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> cat.apply(<span class="literal">null</span>, _.map(coll,fun))</span><br><span class="line">&#125;</span><br><span class="line">mapcat(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> construct(e,[<span class="string">&#x27;,&#x27;</span>]);</span><br><span class="line">&#125;,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">/*[1, &quot;,&quot;, 2, &quot;,&quot;, 3, &quot;,&quot;]*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">butLast</span>(<span class="params">coll</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _.toArray(coll).slice(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">interpost</span>(<span class="params">inter, coll</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> butLast(mapcat(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> construct(e, [inter]);</span><br><span class="line">    &#125;, coll))</span><br><span class="line">&#125;</span><br><span class="line">interpost(<span class="string">&quot;,&quot;</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">//[1, &quot;,&quot;, 2, &quot;,&quot;, 3]</span></span><br></pre></td></tr></table></figure><p>invoker:接受一个方法，并在任何给定的对象上调用它</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">invoker</span>(<span class="params">NAME,METHOD</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target <span class="comment">/*args...*/</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!existy(target)) fail(<span class="string">&#x27;must provide a target&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> targetMethod = target[NAME];</span><br><span class="line">        <span class="keyword">var</span> args = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> doWhen((existy(targetMethod) &amp;&amp; METHOD === targetMethod),</span><br><span class="line">            <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> targetMethod.apply(target,args)</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rev = invoker(<span class="string">&#x27;reverse&#x27;</span>,<span class="built_in">Array</span>.prototype.reverse)</span><br><span class="line"></span><br><span class="line">rev([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="comment">//[3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>防止不存在的函数：full</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce.call(nums,<span class="function"><span class="keyword">function</span>(<span class="params">total,n</span>)</span>&#123;<span class="keyword">return</span> total * n&#125;); <span class="comment">/*0*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnull</span>(<span class="params">fun <span class="comment">/*,default*/</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> defaults = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"><span class="comment">/*args*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.map.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, i</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> existy(e) ? e : defaults[i];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> fun.apply(fun, args)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> safeMult = fnull(<span class="function"><span class="keyword">function</span>(<span class="params">total,n</span>)</span>&#123;<span class="keyword">return</span> total * n&#125;, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce.call(nums,safeMult); <span class="comment">/*30*/</span></span><br><span class="line"></span><br><span class="line">可以这样使用</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaults</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">o, k</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = fnull(_.identity,d[k])</span><br><span class="line">    <span class="keyword">return</span> o &amp;&amp; val(o[k]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lookup = defaults(&#123;<span class="attr">critical</span>:<span class="number">108</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> lookup(config, <span class="string">&#x27;critical&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(doSomething(&#123;<span class="attr">critical</span>:<span class="number">9</span>&#125;)) <span class="comment">/*9*/</span></span><br><span class="line"><span class="built_in">console</span>.log(doSomething(&#123;&#125;)) <span class="comment">//108</span></span><br></pre></td></tr></table></figure><p>利用invoker 如果调用到目标对象不具有的方法会返回undefined，可以组合多个invoker 形成多态函数，或者根据不同参数产生不同行为的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"><span class="comment">/* funs */</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> funs = _.toArray(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">var</span> size = funs.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target <span class="comment">/*, args*/</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">var</span> args = _.rest(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fun;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> funIndex = <span class="number">0</span>; funIndex &lt; size; funIndex++) &#123;</span><br><span class="line">      fun = funs[funIndex];</span><br><span class="line">      ret = fun.apply(fun, construct(target,args))</span><br><span class="line">      <span class="keyword">if</span>(existy(ret)) <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = dispatch(</span><br><span class="line">  invoker(<span class="string">&#x27;toString&#x27;</span>,<span class="built_in">Array</span>.prototype.toString),</span><br><span class="line">  invoker(<span class="string">&#x27;toString&#x27;</span>,<span class="built_in">String</span>.prototype.toString)</span><br><span class="line">  )</span><br><span class="line">str(<span class="string">&quot;a&quot;</span>) <span class="comment">/*&quot;a&quot;*/</span></span><br><span class="line">str([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) <span class="comment">//&quot;1,2,3,4&quot;</span></span><br></pre></td></tr></table></figure><p>当然也可以这样做</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringReverse</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!_.isString(s)) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">return</span> s.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stringReverse(<span class="string">&quot;abc&quot;</span>) <span class="comment">/*&quot;cba&quot;*/</span></span><br><span class="line">stringReverse(<span class="number">1</span>) <span class="comment">/*undefined*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rev = dispatch(</span><br><span class="line">  invoker(<span class="string">&#x27;reverse&#x27;</span>,<span class="built_in">Array</span>.prototype.reverse),</span><br><span class="line">  stringReverse</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">rev([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">/*[3,2,1]*/</span></span><br><span class="line">rev(<span class="string">&#x27;abc&#x27;</span>) <span class="comment">// &quot;cba&quot;</span></span><br></pre></td></tr></table></figure><p>还可以继续包装返回默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sillyReverse = dispatch(rev,always(<span class="number">42</span>));</span><br><span class="line">sillyReverse([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">//[3,2,1]</span></span><br><span class="line">sillyReverse(<span class="string">&#x27;abc&#x27;</span>)<span class="comment">//&#x27;cba&#x27;</span></span><br><span class="line">sillyReverse(<span class="number">10000</span>) <span class="comment">//42</span></span><br></pre></td></tr></table></figure><p>这个函数基本可以取代switch case</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isa</span>(<span class="params">type, action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(type === obj.type)&#123;</span><br><span class="line">      <span class="keyword">return</span> action(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> performCommand = dispatch(</span><br><span class="line">  isa(<span class="string">&#x27;notify&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;notify&#x27;</span>); <span class="keyword">return</span> <span class="literal">true</span>&#125;),</span><br><span class="line">  isa(<span class="string">&#x27;join&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;join&#x27;</span>); <span class="keyword">return</span> <span class="literal">true</span>&#125;),</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;alert&#x27;</span>)&#125;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">performCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;notify&#x27;</span>&#125;) <span class="comment">/*notify*/</span></span><br><span class="line">performCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;join&#x27;</span>&#125;) <span class="comment">/*join*/</span></span><br><span class="line">performCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;other&#x27;</span>&#125;) <span class="comment">/*alert*/</span></span><br></pre></td></tr></table></figure><p>可以很轻松的扩展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performAdminCommand = dispatch(</span><br><span class="line">  isa(<span class="string">&#x27;kill&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;kill&#x27;</span>);<span class="keyword">return</span> <span class="literal">true</span>;&#125;),</span><br><span class="line">  performCommand</span><br><span class="line">  )</span><br><span class="line">performAdminCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;notify&#x27;</span>&#125;) </span><br><span class="line">performAdminCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;join&#x27;</span>&#125;)</span><br><span class="line">performAdminCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;kill&#x27;</span>&#125;) <span class="comment">/*kill*/</span></span><br><span class="line">performAdminCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;other&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>可以实现重载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performTrialUserCommand = dispatch(</span><br><span class="line">  isa(<span class="string">&#x27;join&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">&#x27;user join&#x27;</span>);<span class="keyword">return</span> <span class="literal">true</span>;&#125;),</span><br><span class="line">  performCommand</span><br><span class="line">  )</span><br><span class="line">performTrialUserCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;notify&#x27;</span>&#125;)</span><br><span class="line">performTrialUserCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;join&#x27;</span>&#125;) <span class="comment">/*user join*/</span></span><br><span class="line">performTrialUserCommand(&#123;<span class="attr">type</span>:<span class="string">&#x27;other&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>写一个自动柯里化参数的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun(arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待续</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 结合 travis 实现静态页面的自动部署</title>
      <link href="/2017/03/13/hexo-%E7%BB%93%E5%90%88-travis-c-%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2017/03/13/hexo-%E7%BB%93%E5%90%88-travis-c-%E5%AE%9E%E7%8E%B0%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-部署hexo"><a href="#1-部署hexo" class="headerlink" title="1. 部署hexo"></a>1. 部署hexo</h3><p>参见官方教程 <a href="https://hexo.io/docs/index.html">hexo</a></p><h3 id="2-提交git"><a href="#2-提交git" class="headerlink" title="2. 提交git"></a>2. 提交git</h3><p>分别将生成的静态页面和项目本体提交到不同的分支</p><p>例如： <a href="https://github.com/HiramGao/hiramgao.github.io/tree/master">静态页面</a> <a href="https://github.com/HiramGao/hiramgao.github.io/tree/dev">项目分支</a></p><h3 id="3-自动发布静态文件"><a href="#3-自动发布静态文件" class="headerlink" title="3. 自动发布静态文件"></a>3. 自动发布静态文件</h3><p><a href="https://travis-ci.org/">Travis CI官网</a>利用github账号登录</p><p>将当前的项目添加为自动构建的仓库</p><p>打开  <strong>Build only if .travis.yml is present</strong> 和 <strong>Build pushes</strong> 选项</p><p>利用 <code>ssh-keygen -t rsa -C “例子@gmail.com”</code> 生成id_rsa和id_rsa.pub</p><p>将.pub文件内容添加到 github 项目 <strong>settings &gt; Deploy keys</strong> 处，记得勾选 <strong>Allow write access</strong></p><p>安装travis命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gem install travis</span><br><span class="line">travis login --auto</span><br><span class="line"><span class="comment"># 将id_rsa加密</span></span><br><span class="line">travis encrypt-file id_rsa --add</span><br><span class="line"><span class="comment"># 产生.enc文件</span></span><br></pre></td></tr></table></figure><p>在项目文件夹建立<code>.travis</code>文件夹，将生成的<code>.enc</code>文件放入其中，同时添加<code>ssh_config</code>文件，填写一下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">Host</span> <span class="string">github.com</span></span><br><span class="line">    <span class="string">User</span> <span class="string">git</span></span><br><span class="line">    <span class="string">StrictHostKeyChecking</span> <span class="literal">no</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="string">IdentitiesOnly</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>添加部署文件 <code>.travis.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">openssl</span> <span class="string">aes-256-cbc</span> <span class="string">-K</span> <span class="string">$encrypted_24f627a79d15_key</span> <span class="string">-iv</span> <span class="string">$encrypted_24f627a79d15_iv</span> <span class="string">-in</span> <span class="string">./.travis/id_rsa.enc</span> <span class="string">-out</span> <span class="string">~/.ssh/id_rsa</span> <span class="string">-d</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent)</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ssh-add</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cp</span> <span class="string">.travis/ssh_config</span> <span class="string">~/.ssh/config</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&#x27;hiramgao&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">hiramgao@163.com</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br></pre></td></tr></table></figure><p>最后 提交到github 会自动构建并发布页面</p><p>参考 <a href="https://github.com/HiramGao/hiramgao.github.io/tree/dev">我的博客</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> travis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
