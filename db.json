{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/QAQ/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/css/tag.styl","path":"css/tag.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/css/tags.styl","path":"css/tags.styl","modified":0,"renderable":1},{"_id":"themes/QAQ/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/QAQ/source/images/rss.png","path":"images/rss.png","modified":0,"renderable":1},{"_id":"themes/QAQ/source/images/tags.png","path":"images/tags.png","modified":0,"renderable":1},{"_id":"themes/QAQ/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/Untitled-1.md","hash":"e5ec8c91e33155cc2459ea20a5c27aff8430e4c0","modified":1490684696092},{"_id":"source/_drafts/Untitled.md","hash":"e5ec8c91e33155cc2459ea20a5c27aff8430e4c0","modified":1490684696092},{"_id":"source/_discarded/test.md","hash":"79e8edfbb3e6f16322e492c3255dec4faf6b9e2c","modified":1490684696092},{"_id":"source/_posts/JavaScript函数式编程-一.md","hash":"a92c9590e12c28fef49cf04337a8be31e694c471","modified":1490685009305},{"_id":"source/_posts/hexo-结合-travis-c-实现静态页面的自动部署.md","hash":"4552805af3eafdbc1081ea24b396850697bd16a3","modified":1490684696093},{"_id":"source/tags/index.md","hash":"64dc1e2778b3a932a050409ad29da29a9875fca5","modified":1490684696093},{"_id":"public/atom.xml","hash":"1a1902a5a3fb2a81e461a13a1efa8f7a4008a514","modified":1490685020915},{"_id":"public/tags/index.html","hash":"84c542e1f2aa2ad2ed6861979e1409ddf251b9c4","modified":1490684935722},{"_id":"public/2017/03/28/JavaScript函数式编程-一/index.html","hash":"ce1e7789bcfd3b67aa347131268c72318d2a9493","modified":1490685020966},{"_id":"public/2017/03/13/hexo-结合-travis-c-实现静态页面的自动部署/index.html","hash":"b3ddf210cfc3c967a24bc05aaec4f366642635d1","modified":1490684935722},{"_id":"public/archives/index.html","hash":"72be68a742ae118648d631f890d7332ca6c463e5","modified":1490684935722},{"_id":"public/archives/2017/index.html","hash":"72be68a742ae118648d631f890d7332ca6c463e5","modified":1490684935722},{"_id":"public/archives/2017/03/index.html","hash":"72be68a742ae118648d631f890d7332ca6c463e5","modified":1490684935723},{"_id":"public/index.html","hash":"c8fd1d8b2803b83283fa9d27c7b7b92c41436072","modified":1490684935723},{"_id":"public/tags/JavaScript/index.html","hash":"ceb63436698c665a15b7453d80a3e6bc378c1126","modified":1490684935723},{"_id":"public/tags/函数式编程/index.html","hash":"b3192d9d0018f6fab3d7e1f345c2b709d6dec679","modified":1490684935723},{"_id":"public/tags/hexo/index.html","hash":"e03b55f28aad2fb63ccf5b4381703f547afd844f","modified":1490684935723},{"_id":"public/tags/travis/index.html","hash":"9a9b6262089b1a94d2bae326042921f91e015df3","modified":1490684935723},{"_id":"themes/QAQ/.gitignore","hash":"803c06a7086b5817c03d2e8672da27bc56ba2bce","modified":1490684929078},{"_id":"themes/QAQ/README.md","hash":"6dd0cf5bc8c5cc1ec0f64c8ca783ac29dda958b6","modified":1490684929081},{"_id":"themes/QAQ/_config.yml","hash":"3157b5e07b719dbb28e75a3ca2afb6a9d8674430","modified":1490684929083},{"_id":"themes/QAQ/package.json","hash":"8911f3d6a7e07cd58850b1ed041df6ad25a9b96c","modified":1490684929127},{"_id":"themes/QAQ/layout/category.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490684929114},{"_id":"themes/QAQ/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490684929119},{"_id":"themes/QAQ/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1490684929046},{"_id":"themes/QAQ/.git/config","hash":"2b7993b38b466e1d4cde02716abfbf404ead4dcb","modified":1490684929071},{"_id":"themes/QAQ/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1490684923612},{"_id":"themes/QAQ/.git/index","hash":"5529b833342bc88e8d2ebcc7fdbb3583bb3a8e3f","modified":1490684929172},{"_id":"themes/QAQ/.git/packed-refs","hash":"85e1908388b54503c46736f9ee276d2c1e506ac9","modified":1490684929007},{"_id":"themes/QAQ/languages/en.yml","hash":"3dcaa71a5ec9d977fdb9fdc17dfaa5a558cb3ede","modified":1490684929087},{"_id":"themes/QAQ/languages/zh-CN.yml","hash":"0fde01776479a1a7a116606e384dce66e36820d6","modified":1490684929089},{"_id":"themes/QAQ/layout/archive.ejs","hash":"e7062d08cfff13dfe8b8c8915a2eb0fafb0ae567","modified":1490684929113},{"_id":"themes/QAQ/layout/index.ejs","hash":"dfaae958c5d0eef13f295b769f75b252e419147a","modified":1490684929117},{"_id":"themes/QAQ/layout/layout.ejs","hash":"8b1f2f728a459cfc353f55dca818c893a81fdab3","modified":1490684929119},{"_id":"themes/QAQ/layout/post.ejs","hash":"13b5e125262c106b4889aa58464d0748c8e69273","modified":1490684929123},{"_id":"themes/QAQ/layout/tag.ejs","hash":"d3d49c2b13441aaf87a1089684565631f7702cbb","modified":1490684929125},{"_id":"themes/QAQ/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1490684923616},{"_id":"themes/QAQ/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1490684923618},{"_id":"themes/QAQ/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1490684923620},{"_id":"themes/QAQ/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1490684923623},{"_id":"themes/QAQ/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1490684923625},{"_id":"themes/QAQ/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1490684923627},{"_id":"themes/QAQ/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1490684923629},{"_id":"themes/QAQ/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1490684923631},{"_id":"themes/QAQ/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1490684923633},{"_id":"themes/QAQ/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1490684923635},{"_id":"themes/QAQ/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1490684923639},{"_id":"themes/QAQ/.git/logs/HEAD","hash":"977bcabfaec1482e3dac1f265e099b63860f5583","modified":1490684929056},{"_id":"themes/QAQ/layout/_partial/archive.ejs","hash":"ac759ec64ca9b2c8c02151ad270345eb6c601be8","modified":1490684929094},{"_id":"themes/QAQ/layout/_partial/archive_item.ejs","hash":"d616a88fafaedc500002eab307dfc3fb4f4a7b5d","modified":1490684929096},{"_id":"themes/QAQ/layout/_partial/content.ejs","hash":"0549b0a448be448e3ad715a5bb5877167ee00b2a","modified":1490684929098},{"_id":"themes/QAQ/layout/_partial/nav.ejs","hash":"8155d737be8764abd72bd560ec34dd96d40778d2","modified":1490684929102},{"_id":"themes/QAQ/layout/_partial/head.ejs","hash":"f3fff1c80a5cbdae27f6ab19616ba00d05410d05","modified":1490684929100},{"_id":"themes/QAQ/layout/_partial/pagination.ejs","hash":"a5e7b75e00f2231cfbf488dcca4f65b0e84383cb","modified":1490684929104},{"_id":"themes/QAQ/layout/_partial/post_item.ejs","hash":"d15fd368d552a506757eb32aeee96fe552122aea","modified":1490684929106},{"_id":"themes/QAQ/layout/_partial/tag.ejs","hash":"d5f4d20e657f38fb0f3500bd7d6dab84282facb8","modified":1490684929110},{"_id":"themes/QAQ/layout/_partial/sidebar.ejs","hash":"fb3d0b98eb96b294395c19141eaefc0bc2c5660c","modified":1490684929108},{"_id":"themes/QAQ/layout/_partial/tagcloud.ejs","hash":"1f273932bcbc62005a4ce56a52892ec58cfed34a","modified":1490684929111},{"_id":"themes/QAQ/source/_dep/basscss.min.css","hash":"eceab88b749008b82c0a458cf091f04829941e2c","modified":1490684929132},{"_id":"themes/QAQ/source/_dep/normalize.min.css","hash":"436d18118ee42d6ce7d793c643035afc41dddb56","modified":1490684929133},{"_id":"themes/QAQ/source/css/_markdown.styl","hash":"39434fbae85d9a0282be73a2a4d8769692a75485","modified":1490684929139},{"_id":"themes/QAQ/source/css/_content.styl","hash":"02c5b66dbce687253a0b0b2463441ae20cc31601","modified":1490684929137},{"_id":"themes/QAQ/source/css/_nav.styl","hash":"746f7c7a048a7635b67f475b9529f211adae8913","modified":1490684929141},{"_id":"themes/QAQ/source/css/_pagination.styl","hash":"534a456ec31bda5e230c7e0d2d6f0c37bd028ccc","modified":1490684929143},{"_id":"themes/QAQ/source/css/_sidebar.styl","hash":"35e5bd4c1dada361305c2cd97b750e1bb6c32f04","modified":1490684929146},{"_id":"themes/QAQ/source/css/_utils.styl","hash":"5f319348f93909237cae1a76386db62b4a4872b0","modified":1490684929148},{"_id":"themes/QAQ/source/css/archive.styl","hash":"cbb723e6b9a5fb063d5d054cb615ad1aaa4384c2","modified":1490684929150},{"_id":"themes/QAQ/source/css/index.styl","hash":"0094f2937616fad19c60317d0697d68d954bfd82","modified":1490684929152},{"_id":"themes/QAQ/source/css/main.styl","hash":"38de240c63f0116ad66c5b12e286c52f59629681","modified":1490684929154},{"_id":"themes/QAQ/source/css/post.styl","hash":"9ae178c3ad6293c2cc2c19cda18a02a4f95ccf52","modified":1490684929156},{"_id":"themes/QAQ/source/css/tag.styl","hash":"184edb9e259244029a0c8085ba138b5afa56c093","modified":1490684929158},{"_id":"themes/QAQ/source/css/tags.styl","hash":"d1837b72be3fc8a34eef3a17ac234e0383eaad74","modified":1490684929160},{"_id":"themes/QAQ/source/images/avatar.jpg","hash":"f6a2a90e4052c3df63e2f63fd964710c7983dd7c","modified":1490684929164},{"_id":"themes/QAQ/source/images/rss.png","hash":"a37c282062d3fb776c6786a849e5afc24d417265","modified":1490684929166},{"_id":"themes/QAQ/source/images/tags.png","hash":"9ef3730bd270539e617551d4bdf12cd88cddb4de","modified":1490684929168},{"_id":"themes/QAQ/source/js/highlight.pack.js","hash":"2ee176d685eabc66808e4e2b3972693a0bffb318","modified":1490684929172},{"_id":"themes/QAQ/.git/refs/heads/master","hash":"c44794cd163669c9d38dd9fa95156fd454071d6b","modified":1490684929054},{"_id":"themes/QAQ/.git/objects/pack/pack-cd0a4a1f9dc6ea3abca5bb4b51442148d4f29271.idx","hash":"a438e04d14c495d8c7307c04680fad2730dae180","modified":1490684928517},{"_id":"themes/QAQ/.git/objects/pack/pack-cd0a4a1f9dc6ea3abca5bb4b51442148d4f29271.pack","hash":"2f3793cd29cdb8be8d284b5aa8578474ee71c55b","modified":1490684928565},{"_id":"themes/QAQ/.git/logs/refs/heads/master","hash":"977bcabfaec1482e3dac1f265e099b63860f5583","modified":1490684929060},{"_id":"themes/QAQ/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1490684929038},{"_id":"themes/QAQ/.git/logs/refs/remotes/origin/HEAD","hash":"977bcabfaec1482e3dac1f265e099b63860f5583","modified":1490684929036},{"_id":"public/images/avatar.jpg","hash":"f6a2a90e4052c3df63e2f63fd964710c7983dd7c","modified":1490684935727},{"_id":"public/images/tags.png","hash":"9ef3730bd270539e617551d4bdf12cd88cddb4de","modified":1490684935727},{"_id":"public/images/rss.png","hash":"a37c282062d3fb776c6786a849e5afc24d417265","modified":1490684935727},{"_id":"public/css/archive.css","hash":"1f63c736221b3d5bcfd694635afbb2cd42ad5ea1","modified":1490684936238},{"_id":"public/css/main.css","hash":"5c7197c9ffeba4baab5c18def83811f8022650f5","modified":1490684936238},{"_id":"public/css/index.css","hash":"10434d28de9e132bf83b6e8477478f135565409f","modified":1490684936238},{"_id":"public/css/post.css","hash":"7a260ea124d4d2e42a01edabf640eefda8861cee","modified":1490684936238},{"_id":"public/css/tags.css","hash":"3b8fca14dea4e54a58c2a46ff3a5e44d32789d91","modified":1490684936238},{"_id":"public/css/tag.css","hash":"ecb86743fa2d3ca6da7ecf05b62c8d08217d3821","modified":1490684936238},{"_id":"public/js/highlight.pack.js","hash":"2ef833225abf39be9448f9886d33b6d027075f42","modified":1490684936239}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-03-09T06:47:11.000Z","layout":"tag","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-09 14:47:11\nlayout: \"tag\"\ntype: \"tags\"\n---\n","updated":"2017-03-28T07:04:56.093Z","path":"tags/index.html","comments":1,"_id":"cj0t7ael50008x4qn8x51jch6","content":"","excerpt":"","more":""}],"Post":[{"title":"Untitled","author":"John Doe","_content":"","source":"_drafts/Untitled-1.md","raw":"---\ntitle: Untitled\nauthor: John Doe\ntags:\n---\n","slug":"Untitled-1","published":0,"date":"2017-03-28T07:04:56.092Z","updated":"2017-03-28T07:04:56.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0t7aekl0000x4qnsz029qjz","content":"","excerpt":"","more":""},{"title":"Untitled","author":"John Doe","_content":"","source":"_drafts/Untitled.md","raw":"---\ntitle: Untitled\nauthor: John Doe\ntags:\n---\n","slug":"Untitled","published":0,"date":"2017-03-28T07:04:56.092Z","updated":"2017-03-28T07:04:56.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0t7aeks0001x4qn9c5mdn5o","content":"","excerpt":"","more":""},{"title":"JavaScript函数式编程(一)","date":"2017-03-28T07:06:55.000Z","_content":"为什么要用函数式，因为爽！！！！\n[JS函数式编程指南](https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details)\n[JavaScript函数式编程](https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01264FOY4/ref=sr_1_1?ie=UTF8&qid=1490667646&sr=8-1&keywords=javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B)\n两本不一样\n[underscorejs](http://underscorejs.org/)\n确保理解JavaScript的闭包和作用域\n## 基础知识\n明白下面概念\n1.  JavaScript中纯函数是一等公民\n\t什么叫做**纯函数**\n\t``` javascript\n\tfunction add(a,b){\n\t\treturn a + b\n\t}\n\tadd(1,2) //3\n\tadd(1,2) //3\n\t```\n\t纯函数是指**不依赖且不改变它作用域之外的变量状态**的函数。下面的是非纯函数\n\t``` javascript\n\tvar c = 1\n\tfunction addWithC(a,b){\n\t\treturn a + b + c\n\t}\n\taddWithC(1,2)//4\n\tc = 2\n\taddWith(1,2) //5\n\t```\n\t为什么说js中函数是一等公民\n\t函数可以作为变量、数组元素、对象成员、作为参数、作为return 对象，可以去任何值的地方，所以是一等的公民。\n2. 高阶函数\n\t以一个函数作为参数，以一个函数作为返回结果就为**高阶函数**。\n\t``` javascript\n\tfunction add(a, b){\n\t\treturn a + b\n\t}\n\tfunction addWithC(fn, a, b){\n\t\treturn function(c){\n\t\t\treturn fn.call(this,a, b) + c\n\t\t}\n\t}\n\taddWithC(add,1,2)(3) //6\n\t```\n3. 柯里化\n\t将多个参数的函数转变为接受单一参数的函数\n\t```  javascript\n\tfunction add(a, b){\n\t\treturn  a + b\n\t}\n\tvar addWith10 = (function addWith10(){\n\t\treturn function(a){\n\t\t\treturn add.call(this,10, a)\n\t\t}\n\t})()\n\taddWith10(1) //11\n\taddWith10(2) //12\n\t```\n\n## 实战演练\n有了基本概念就可以开始实战了\n定义几个输出信息的函数\n``` javascript\nfunction fail(thing){\n\tthrow new Error(thing)\n}\nfunction warn(thing){\n\tconsole.warn([\"WARNING:\", thing].join(' '))\n}\nfunction note(thing){\n\tconsole.log([\"NOTE:\", thing].join(' '))\n}\n```\n定义两个常用函数\n``` javascript\n//检查值是否为null和undefined\nfunction existy(x){ return x != null}\n//判断x是否被认为是true的同义词\nfunction truthy(x){ return (x !== false && existy(x))}\n\n[1,null,false,undefined].map(existy)\n//[true, false, true, false]\n[1,null,false,undefined].map(truthy)\n//[true, false, false, false]\n```\n那么就可以代替以下操作\n``` javascript\n{\n\tif(condition)\n\t\treturn _.isFunction(doSomething) ? doSomething() : doSomething;\n\telse\n\t\treturn undefined;\n}\n\nfunction doWhen(cond, action){\n\tif(truthy(cond))\n\t\treturn action();\n\telse\n\t\treturn undefined;\n}\n```\n返回常量的函数\n``` javascript\nfunction always(VALUE){\n\treturn function(){\n\t\treturn VALUE;\n\t}\n}\n\nvar f = always(function(){})\nf() === f() //true\n```\n在来几个基本函数\n``` javascript\nfunction cat(){\n\tvar head = _.first(arguments);\n\tif(existy(head)){\n\t\treturn head.concat.apply(head, _.rest(arguments));\n\t}else{\n\t\treturn [];\n\t}\n}\ncat([1,2,3],[4,5],[6,7,8,9]) //[1, 2, 3, 4, 5, 6, 7, 8, 9]\n//第一个\nfunction construct(head, tail){\n\treturn cat([head], _.toArray(tail))\n}\nconstruct(42,[1,2,3]) //[42, 1, 2, 3]\n//第二个\nfunction mapcat(fun, coll){\n\treturn cat.apply(null, _.map(coll,fun))\n}\nmapcat(function(e){\n\treturn construct(e,[',']);\n},[1,2,3]) //[1, \",\", 2, \",\", 3, \",\"]\n\nfunction butLast(coll) {\n    return _.toArray(coll).slice(0, -1);\n}\n\nfunction interpost(inter, coll) {\n    return butLast(mapcat(function(e) {\n        return construct(e, [inter]);\n    }, coll))\n}\ninterpost(\",\",[1,2,3]) //[1, \",\", 2, \",\", 3]\n```\ninvoker:接受一个方法，并在任何给定的对象上调用它\n``` javascript\nfunction invoker(NAME,METHOD){\n    return function(target /*args...*/){\n        if(!existy(target)) fail('must provide a target');\n        var targetMethod = target[NAME];\n        var args = _.rest(arguments);\n        return doWhen((existy(targetMethod) && METHOD === targetMethod),\n            function(){\n                return targetMethod.apply(target,args)\n            }\n        );\n    }\n}\n\nvar rev = invoker('reverse',Array.prototype.reverse)\n\nrev([1,2,3])\n//[3, 2, 1]\n```\n防止不存在的函数：full\n``` javascript\nvar nums = [1,2,3,null,5]\nArray.prototype.reduce.call(nums,function(total,n){return total * n}); //0\n\nfunction fnull(fun /*,default*/){\n\tvar defaults = Array.prototype.slice.call(arguments);\n\treturn function(/*args*/){\n\t\tvar args = Array.prototype.map.call(arguments, function(e, i){\n\t\t\treturn existy(e) ? e : defaults[i];\n\t\t});\n\t\treturn fun.apply(fun, args)\n\t};\n}\n\nvar safeMult = fnull(function(total,n){return total * n}, 1, 1)\nArray.prototype.reduce.call(nums,safeMult); //30\n\n可以这样使用\nfunction defaults(d){\n\treturn function(o, k){\n\t\tvar val = fnull(_.identity,d[k])\n\t\treturn o && val(o[k]);\n\t}\n}\n\nfunction doSomething(config){\n\tvar lookup = defaults({critical:108});\n\treturn lookup(config, 'critical')\n}\nconsole.log(doSomething({critical:9})) //9\nconsole.log(doSomething({})) //108\n```\n利用invoker 如果调用到目标对象不具有的方法会返回undefined，可以组合多个invoker 形成多态函数，或者根据不同参数产生不同行为的函数\n``` javascript\n\nfunction dispatch(/* funs */){\n\tvar funs = _.toArray(arguments);\n\tvar size = funs.length;\n\treturn function(target /*, args*/){\n\t\tvar ret = undefined;\n\t\tvar args = _.rest(arguments);\n\t\tvar fun;\n\t\tfor (var funIndex = 0; funIndex < size; funIndex++) {\n\t\t\tfun = funs[funIndex];\n\t\t\tret = fun.apply(fun, construct(target,args))\n\t\t\tif(existy(ret)) return ret;\n\t\t}\n\n\t\treturn ret\n\t};\n}\n\nvar str = dispatch(\n\tinvoker('toString',Array.prototype.toString),\n\tinvoker('toString',String.prototype.toString)\n\t)\nstr(\"a\") //\"a\"\nstr([1,2,3,4]) //\"1,2,3,4\"\n```\n当然也可以这样做\n``` javascript\nfunction stringReverse(s){\n\tif(!_.isString(s)) return undefined;\n\treturn s.split('').reverse().join('')\n}\n\nstringReverse(\"abc\") //\"cba\"\nstringReverse(1) //undefined\n\nvar rev = dispatch(\n\tinvoker('reverse',Array.prototype.reverse),\n\tstringReverse\n\t)\n\nrev([1,2,3]) //[3,2,1]\nrev('abc') // \"cba\"\n```\n还可以继续包装返回默认值\n``` javascript\nvar sillyReverse = dispatch(rev,always(42));\nsillyReverse([1,2,3]) //[3,2,1]\nsillyReverse('abc')//'cba'\nsillyReverse(10000) //42\n```\n这个函数基本可以取代switch case\n``` javascript\nfunction isa(type, action){\n\treturn function(obj){\n\t\tif(type === obj.type){\n\t\t\treturn action(obj)\n\t\t}\n\t}\n}\nvar performCommand = dispatch(\n\tisa('notify',function(obj){console.log('notify'); return true}),\n\tisa('join',function(obj){console.log('join'); return true}),\n\tfunction(obj){console.log('alert')}\n\t);\n\nperformCommand({type:'notify'}) //notify\nperformCommand({type:'join'}) //join\nperformCommand({type:'other'}) //alert\n```\n可以很轻松的扩展\n``` javascript\nvar performAdminCommand = dispatch(\n\tisa('kill',function(obj){console.log('kill');return true;}),\n\tperformCommand\n\t)\nperformAdminCommand({type:'notify'}) \nperformAdminCommand({type:'join'})\nperformAdminCommand({type:'kill'}) //kill\nperformAdminCommand({type:'other'})\n```\n可以实现重载\n``` javascript\nvar performTrialUserCommand = dispatch(\n\tisa('join',function(obj){console.log('user join');return true;}),\n\tperformCommand\n\t)\nperformTrialUserCommand({type:'notify'})\nperformTrialUserCommand({type:'join'}) //user join\nperformTrialUserCommand({type:'other'})\n```\n写一个自动柯里化参数的函数\n``` javascript\nfunction curry(fun){\n\treturn function(arg){\n\t\treturn fun(arg)\n\t}\n}\n```\n待续","source":"_posts/JavaScript函数式编程-一.md","raw":"---\ntitle: JavaScript函数式编程(一)\ndate: 2017-03-28 15:06:55\ntags: \n- JavaScript\n- 函数式编程\n---\n为什么要用函数式，因为爽！！！！\n[JS函数式编程指南](https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details)\n[JavaScript函数式编程](https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01264FOY4/ref=sr_1_1?ie=UTF8&qid=1490667646&sr=8-1&keywords=javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B)\n两本不一样\n[underscorejs](http://underscorejs.org/)\n确保理解JavaScript的闭包和作用域\n## 基础知识\n明白下面概念\n1.  JavaScript中纯函数是一等公民\n\t什么叫做**纯函数**\n\t``` javascript\n\tfunction add(a,b){\n\t\treturn a + b\n\t}\n\tadd(1,2) //3\n\tadd(1,2) //3\n\t```\n\t纯函数是指**不依赖且不改变它作用域之外的变量状态**的函数。下面的是非纯函数\n\t``` javascript\n\tvar c = 1\n\tfunction addWithC(a,b){\n\t\treturn a + b + c\n\t}\n\taddWithC(1,2)//4\n\tc = 2\n\taddWith(1,2) //5\n\t```\n\t为什么说js中函数是一等公民\n\t函数可以作为变量、数组元素、对象成员、作为参数、作为return 对象，可以去任何值的地方，所以是一等的公民。\n2. 高阶函数\n\t以一个函数作为参数，以一个函数作为返回结果就为**高阶函数**。\n\t``` javascript\n\tfunction add(a, b){\n\t\treturn a + b\n\t}\n\tfunction addWithC(fn, a, b){\n\t\treturn function(c){\n\t\t\treturn fn.call(this,a, b) + c\n\t\t}\n\t}\n\taddWithC(add,1,2)(3) //6\n\t```\n3. 柯里化\n\t将多个参数的函数转变为接受单一参数的函数\n\t```  javascript\n\tfunction add(a, b){\n\t\treturn  a + b\n\t}\n\tvar addWith10 = (function addWith10(){\n\t\treturn function(a){\n\t\t\treturn add.call(this,10, a)\n\t\t}\n\t})()\n\taddWith10(1) //11\n\taddWith10(2) //12\n\t```\n\n## 实战演练\n有了基本概念就可以开始实战了\n定义几个输出信息的函数\n``` javascript\nfunction fail(thing){\n\tthrow new Error(thing)\n}\nfunction warn(thing){\n\tconsole.warn([\"WARNING:\", thing].join(' '))\n}\nfunction note(thing){\n\tconsole.log([\"NOTE:\", thing].join(' '))\n}\n```\n定义两个常用函数\n``` javascript\n//检查值是否为null和undefined\nfunction existy(x){ return x != null}\n//判断x是否被认为是true的同义词\nfunction truthy(x){ return (x !== false && existy(x))}\n\n[1,null,false,undefined].map(existy)\n//[true, false, true, false]\n[1,null,false,undefined].map(truthy)\n//[true, false, false, false]\n```\n那么就可以代替以下操作\n``` javascript\n{\n\tif(condition)\n\t\treturn _.isFunction(doSomething) ? doSomething() : doSomething;\n\telse\n\t\treturn undefined;\n}\n\nfunction doWhen(cond, action){\n\tif(truthy(cond))\n\t\treturn action();\n\telse\n\t\treturn undefined;\n}\n```\n返回常量的函数\n``` javascript\nfunction always(VALUE){\n\treturn function(){\n\t\treturn VALUE;\n\t}\n}\n\nvar f = always(function(){})\nf() === f() //true\n```\n在来几个基本函数\n``` javascript\nfunction cat(){\n\tvar head = _.first(arguments);\n\tif(existy(head)){\n\t\treturn head.concat.apply(head, _.rest(arguments));\n\t}else{\n\t\treturn [];\n\t}\n}\ncat([1,2,3],[4,5],[6,7,8,9]) //[1, 2, 3, 4, 5, 6, 7, 8, 9]\n//第一个\nfunction construct(head, tail){\n\treturn cat([head], _.toArray(tail))\n}\nconstruct(42,[1,2,3]) //[42, 1, 2, 3]\n//第二个\nfunction mapcat(fun, coll){\n\treturn cat.apply(null, _.map(coll,fun))\n}\nmapcat(function(e){\n\treturn construct(e,[',']);\n},[1,2,3]) //[1, \",\", 2, \",\", 3, \",\"]\n\nfunction butLast(coll) {\n    return _.toArray(coll).slice(0, -1);\n}\n\nfunction interpost(inter, coll) {\n    return butLast(mapcat(function(e) {\n        return construct(e, [inter]);\n    }, coll))\n}\ninterpost(\",\",[1,2,3]) //[1, \",\", 2, \",\", 3]\n```\ninvoker:接受一个方法，并在任何给定的对象上调用它\n``` javascript\nfunction invoker(NAME,METHOD){\n    return function(target /*args...*/){\n        if(!existy(target)) fail('must provide a target');\n        var targetMethod = target[NAME];\n        var args = _.rest(arguments);\n        return doWhen((existy(targetMethod) && METHOD === targetMethod),\n            function(){\n                return targetMethod.apply(target,args)\n            }\n        );\n    }\n}\n\nvar rev = invoker('reverse',Array.prototype.reverse)\n\nrev([1,2,3])\n//[3, 2, 1]\n```\n防止不存在的函数：full\n``` javascript\nvar nums = [1,2,3,null,5]\nArray.prototype.reduce.call(nums,function(total,n){return total * n}); //0\n\nfunction fnull(fun /*,default*/){\n\tvar defaults = Array.prototype.slice.call(arguments);\n\treturn function(/*args*/){\n\t\tvar args = Array.prototype.map.call(arguments, function(e, i){\n\t\t\treturn existy(e) ? e : defaults[i];\n\t\t});\n\t\treturn fun.apply(fun, args)\n\t};\n}\n\nvar safeMult = fnull(function(total,n){return total * n}, 1, 1)\nArray.prototype.reduce.call(nums,safeMult); //30\n\n可以这样使用\nfunction defaults(d){\n\treturn function(o, k){\n\t\tvar val = fnull(_.identity,d[k])\n\t\treturn o && val(o[k]);\n\t}\n}\n\nfunction doSomething(config){\n\tvar lookup = defaults({critical:108});\n\treturn lookup(config, 'critical')\n}\nconsole.log(doSomething({critical:9})) //9\nconsole.log(doSomething({})) //108\n```\n利用invoker 如果调用到目标对象不具有的方法会返回undefined，可以组合多个invoker 形成多态函数，或者根据不同参数产生不同行为的函数\n``` javascript\n\nfunction dispatch(/* funs */){\n\tvar funs = _.toArray(arguments);\n\tvar size = funs.length;\n\treturn function(target /*, args*/){\n\t\tvar ret = undefined;\n\t\tvar args = _.rest(arguments);\n\t\tvar fun;\n\t\tfor (var funIndex = 0; funIndex < size; funIndex++) {\n\t\t\tfun = funs[funIndex];\n\t\t\tret = fun.apply(fun, construct(target,args))\n\t\t\tif(existy(ret)) return ret;\n\t\t}\n\n\t\treturn ret\n\t};\n}\n\nvar str = dispatch(\n\tinvoker('toString',Array.prototype.toString),\n\tinvoker('toString',String.prototype.toString)\n\t)\nstr(\"a\") //\"a\"\nstr([1,2,3,4]) //\"1,2,3,4\"\n```\n当然也可以这样做\n``` javascript\nfunction stringReverse(s){\n\tif(!_.isString(s)) return undefined;\n\treturn s.split('').reverse().join('')\n}\n\nstringReverse(\"abc\") //\"cba\"\nstringReverse(1) //undefined\n\nvar rev = dispatch(\n\tinvoker('reverse',Array.prototype.reverse),\n\tstringReverse\n\t)\n\nrev([1,2,3]) //[3,2,1]\nrev('abc') // \"cba\"\n```\n还可以继续包装返回默认值\n``` javascript\nvar sillyReverse = dispatch(rev,always(42));\nsillyReverse([1,2,3]) //[3,2,1]\nsillyReverse('abc')//'cba'\nsillyReverse(10000) //42\n```\n这个函数基本可以取代switch case\n``` javascript\nfunction isa(type, action){\n\treturn function(obj){\n\t\tif(type === obj.type){\n\t\t\treturn action(obj)\n\t\t}\n\t}\n}\nvar performCommand = dispatch(\n\tisa('notify',function(obj){console.log('notify'); return true}),\n\tisa('join',function(obj){console.log('join'); return true}),\n\tfunction(obj){console.log('alert')}\n\t);\n\nperformCommand({type:'notify'}) //notify\nperformCommand({type:'join'}) //join\nperformCommand({type:'other'}) //alert\n```\n可以很轻松的扩展\n``` javascript\nvar performAdminCommand = dispatch(\n\tisa('kill',function(obj){console.log('kill');return true;}),\n\tperformCommand\n\t)\nperformAdminCommand({type:'notify'}) \nperformAdminCommand({type:'join'})\nperformAdminCommand({type:'kill'}) //kill\nperformAdminCommand({type:'other'})\n```\n可以实现重载\n``` javascript\nvar performTrialUserCommand = dispatch(\n\tisa('join',function(obj){console.log('user join');return true;}),\n\tperformCommand\n\t)\nperformTrialUserCommand({type:'notify'})\nperformTrialUserCommand({type:'join'}) //user join\nperformTrialUserCommand({type:'other'})\n```\n写一个自动柯里化参数的函数\n``` javascript\nfunction curry(fun){\n\treturn function(arg){\n\t\treturn fun(arg)\n\t}\n}\n```\n待续","slug":"JavaScript函数式编程-一","published":1,"updated":"2017-03-28T07:10:09.305Z","_id":"cj0t7aeku0002x4qnx5ztkj4r","comments":1,"layout":"post","photos":[],"link":"","content":"<p>为什么要用函数式，因为爽！！！！<br><a href=\"https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details\" target=\"_blank\" rel=\"external\">JS函数式编程指南</a><br><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01264FOY4/ref=sr_1_1?ie=UTF8&amp;qid=1490667646&amp;sr=8-1&amp;keywords=javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\" target=\"_blank\" rel=\"external\">JavaScript函数式编程</a><br>两本不一样<br><a href=\"http://underscorejs.org/\" target=\"_blank\" rel=\"external\">underscorejs</a><br>确保理解JavaScript的闭包和作用域</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>明白下面概念</p>\n<ol>\n<li><p>JavaScript中纯函数是一等公民<br>什么叫做<strong>纯函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></div><div class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p>纯函数是指<strong>不依赖且不改变它作用域之外的变量状态</strong>的函数。下面的是非纯函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWithC</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b + c</div><div class=\"line\">&#125;</div><div class=\"line\">addWithC(<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//4</span></div><div class=\"line\">c = <span class=\"number\">2</span></div><div class=\"line\">addWith(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<p>为什么说js中函数是一等公民<br>函数可以作为变量、数组元素、对象成员、作为参数、作为return 对象，可以去任何值的地方，所以是一等的公民。</p>\n</li>\n<li><p>高阶函数<br> 以一个函数作为参数，以一个函数作为返回结果就为<strong>高阶函数</strong>。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWithC</span>(<span class=\"params\">fn, a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>,a, b) + c</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">addWithC(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">//6</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>柯里化<br> 将多个参数的函数转变为接受单一参数的函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  a + b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> addWith10 = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWith10</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> add.call(<span class=\"keyword\">this</span>,<span class=\"number\">10</span>, a)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\">addWith10(<span class=\"number\">1</span>) <span class=\"comment\">//11</span></div><div class=\"line\">addWith10(<span class=\"number\">2</span>) <span class=\"comment\">//12</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h2><p>有了基本概念就可以开始实战了<br>定义几个输出信息的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(thing)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warn</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.warn([<span class=\"string\">\"WARNING:\"</span>, thing].join(<span class=\"string\">' '</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">note</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log([<span class=\"string\">\"NOTE:\"</span>, thing].join(<span class=\"string\">' '</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>定义两个常用函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//检查值是否为null和undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">existy</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x != <span class=\"literal\">null</span>&#125;</div><div class=\"line\"><span class=\"comment\">//判断x是否被认为是true的同义词</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">truthy</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> (x !== <span class=\"literal\">false</span> &amp;&amp; existy(x))&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">undefined</span>].map(existy)</div><div class=\"line\"><span class=\"comment\">//[true, false, true, false]</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">undefined</span>].map(truthy)</div><div class=\"line\"><span class=\"comment\">//[true, false, false, false]</span></div></pre></td></tr></table></figure></p>\n<p>那么就可以代替以下操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(condition)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _.isFunction(doSomething) ? doSomething() : doSomething;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doWhen</span>(<span class=\"params\">cond, action</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(truthy(cond))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> action();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回常量的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">always</span>(<span class=\"params\">VALUE</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> VALUE;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = always(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</div><div class=\"line\">f() === f() <span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>在来几个基本函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = _.first(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(existy(head))&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> head.concat.apply(head, _.rest(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">cat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]) <span class=\"comment\">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\"><span class=\"comment\">//第一个</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">construct</span>(<span class=\"params\">head, tail</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cat([head], _.toArray(tail))</div><div class=\"line\">&#125;</div><div class=\"line\">construct(<span class=\"number\">42</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[42, 1, 2, 3]</span></div><div class=\"line\"><span class=\"comment\">//第二个</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapcat</span>(<span class=\"params\">fun, coll</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cat.apply(<span class=\"literal\">null</span>, _.map(coll,fun))</div><div class=\"line\">&#125;</div><div class=\"line\">mapcat(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> construct(e,[<span class=\"string\">','</span>]);</div><div class=\"line\">&#125;,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[1, \",\", 2, \",\", 3, \",\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">butLast</span>(<span class=\"params\">coll</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.toArray(coll).slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpost</span>(<span class=\"params\">inter, coll</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> butLast(mapcat(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> construct(e, [inter]);</div><div class=\"line\">    &#125;, coll))</div><div class=\"line\">&#125;</div><div class=\"line\">interpost(<span class=\"string\">\",\"</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[1, \",\", 2, \",\", 3]</span></div></pre></td></tr></table></figure></p>\n<p>invoker:接受一个方法，并在任何给定的对象上调用它<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoker</span>(<span class=\"params\">NAME,METHOD</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target <span class=\"regexp\">/*args...*/</span></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!existy(target)) fail(<span class=\"string\">'must provide a target'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> targetMethod = target[NAME];</div><div class=\"line\">        <span class=\"keyword\">var</span> args = _.rest(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> doWhen((existy(targetMethod) &amp;&amp; METHOD === targetMethod),</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> targetMethod.apply(target,args)</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rev = invoker(<span class=\"string\">'reverse'</span>,<span class=\"built_in\">Array</span>.prototype.reverse)</div><div class=\"line\"></div><div class=\"line\">rev([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"comment\">//[3, 2, 1]</span></div></pre></td></tr></table></figure></p>\n<p>防止不存在的函数：full<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">null</span>,<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce.call(nums,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,n</span>)</span>&#123;<span class=\"keyword\">return</span> total * n&#125;); <span class=\"comment\">//0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnull</span>(<span class=\"params\">fun <span class=\"regexp\">/*,default*/</span></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> defaults = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"regexp\">/*args*/</span></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.map.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, i</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> existy(e) ? e : defaults[i];</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fun.apply(fun, args)</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> safeMult = fnull(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,n</span>)</span>&#123;<span class=\"keyword\">return</span> total * n&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce.call(nums,safeMult); <span class=\"comment\">//30</span></div><div class=\"line\"></div><div class=\"line\">可以这样使用</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defaults</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, k</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> val = fnull(_.identity,d[k])</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> o &amp;&amp; val(o[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> lookup = defaults(&#123;<span class=\"attr\">critical</span>:<span class=\"number\">108</span>&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> lookup(config, <span class=\"string\">'critical'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(doSomething(&#123;<span class=\"attr\">critical</span>:<span class=\"number\">9</span>&#125;)) <span class=\"comment\">//9</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(doSomething(&#123;&#125;)) <span class=\"comment\">//108</span></div></pre></td></tr></table></figure></p>\n<p>利用invoker 如果调用到目标对象不具有的方法会返回undefined，可以组合多个invoker 形成多态函数，或者根据不同参数产生不同行为的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\"><span class=\"regexp\">/* funs */</span></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> funs = _.toArray(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> size = funs.length;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target <span class=\"regexp\">/*, args*/</span></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">undefined</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> args = _.rest(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> fun;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> funIndex = <span class=\"number\">0</span>; funIndex &lt; size; funIndex++) &#123;</div><div class=\"line\">\t\t\tfun = funs[funIndex];</div><div class=\"line\">\t\t\tret = fun.apply(fun, construct(target,args))</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(existy(ret)) <span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = dispatch(</div><div class=\"line\">\tinvoker(<span class=\"string\">'toString'</span>,<span class=\"built_in\">Array</span>.prototype.toString),</div><div class=\"line\">\tinvoker(<span class=\"string\">'toString'</span>,<span class=\"built_in\">String</span>.prototype.toString)</div><div class=\"line\">\t)</div><div class=\"line\">str(<span class=\"string\">\"a\"</span>) <span class=\"comment\">//\"a\"</span></div><div class=\"line\">str([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]) <span class=\"comment\">//\"1,2,3,4\"</span></div></pre></td></tr></table></figure></p>\n<p>当然也可以这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringReverse</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!_.isString(s)) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">stringReverse(<span class=\"string\">\"abc\"</span>) <span class=\"comment\">//\"cba\"</span></div><div class=\"line\">stringReverse(<span class=\"number\">1</span>) <span class=\"comment\">//undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rev = dispatch(</div><div class=\"line\">\tinvoker(<span class=\"string\">'reverse'</span>,<span class=\"built_in\">Array</span>.prototype.reverse),</div><div class=\"line\">\tstringReverse</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\">rev([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[3,2,1]</span></div><div class=\"line\">rev(<span class=\"string\">'abc'</span>) <span class=\"comment\">// \"cba\"</span></div></pre></td></tr></table></figure></p>\n<p>还可以继续包装返回默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sillyReverse = dispatch(rev,always(<span class=\"number\">42</span>));</div><div class=\"line\">sillyReverse([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[3,2,1]</span></div><div class=\"line\">sillyReverse(<span class=\"string\">'abc'</span>)<span class=\"comment\">//'cba'</span></div><div class=\"line\">sillyReverse(<span class=\"number\">10000</span>) <span class=\"comment\">//42</span></div></pre></td></tr></table></figure></p>\n<p>这个函数基本可以取代switch case<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isa</span>(<span class=\"params\">type, action</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === obj.type)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> action(obj)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> performCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'notify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'notify'</span>); <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;),</div><div class=\"line\">\tisa(<span class=\"string\">'join'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'join'</span>); <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;),</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'alert'</span>)&#125;</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;) <span class=\"comment\">//notify</span></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;) <span class=\"comment\">//join</span></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;) <span class=\"comment\">//alert</span></div></pre></td></tr></table></figure></p>\n<p>可以很轻松的扩展<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performAdminCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'kill'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'kill'</span>);<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;),</div><div class=\"line\">\tperformCommand</div><div class=\"line\">\t)</div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;) </div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;)</div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'kill'</span>&#125;) <span class=\"comment\">//kill</span></div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>可以实现重载<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performTrialUserCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'join'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'user join'</span>);<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;),</div><div class=\"line\">\tperformCommand</div><div class=\"line\">\t)</div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;)</div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;) <span class=\"comment\">//user join</span></div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>写一个自动柯里化参数的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fun</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fun(arg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>待续</p>\n","excerpt":"","more":"<p>为什么要用函数式，因为爽！！！！<br><a href=\"https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details\">JS函数式编程指南</a><br><a href=\"https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01264FOY4/ref=sr_1_1?ie=UTF8&amp;qid=1490667646&amp;sr=8-1&amp;keywords=javascript%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\">JavaScript函数式编程</a><br>两本不一样<br><a href=\"http://underscorejs.org/\">underscorejs</a><br>确保理解JavaScript的闭包和作用域</p>\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>明白下面概念</p>\n<ol>\n<li><p>JavaScript中纯函数是一等公民<br>什么叫做<strong>纯函数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></div><div class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p>纯函数是指<strong>不依赖且不改变它作用域之外的变量状态</strong>的函数。下面的是非纯函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWithC</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b + c</div><div class=\"line\">&#125;</div><div class=\"line\">addWithC(<span class=\"number\">1</span>,<span class=\"number\">2</span>)<span class=\"comment\">//4</span></div><div class=\"line\">c = <span class=\"number\">2</span></div><div class=\"line\">addWith(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<p>为什么说js中函数是一等公民<br>函数可以作为变量、数组元素、对象成员、作为参数、作为return 对象，可以去任何值的地方，所以是一等的公民。</p>\n</li>\n<li><p>高阶函数<br> 以一个函数作为参数，以一个函数作为返回结果就为<strong>高阶函数</strong>。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWithC</span>(<span class=\"params\">fn, a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fn.call(<span class=\"keyword\">this</span>,a, b) + c</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">addWithC(add,<span class=\"number\">1</span>,<span class=\"number\">2</span>)(<span class=\"number\">3</span>) <span class=\"comment\">//6</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>柯里化<br> 将多个参数的函数转变为接受单一参数的函数</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span>  a + b</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> addWith10 = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addWith10</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> add.call(<span class=\"keyword\">this</span>,<span class=\"number\">10</span>, a)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)()</div><div class=\"line\">addWith10(<span class=\"number\">1</span>) <span class=\"comment\">//11</span></div><div class=\"line\">addWith10(<span class=\"number\">2</span>) <span class=\"comment\">//12</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"实战演练\"><a href=\"#实战演练\" class=\"headerlink\" title=\"实战演练\"></a>实战演练</h2><p>有了基本概念就可以开始实战了<br>定义几个输出信息的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fail</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(thing)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">warn</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.warn([<span class=\"string\">\"WARNING:\"</span>, thing].join(<span class=\"string\">' '</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">note</span>(<span class=\"params\">thing</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log([<span class=\"string\">\"NOTE:\"</span>, thing].join(<span class=\"string\">' '</span>))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>定义两个常用函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//检查值是否为null和undefined</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">existy</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> x != <span class=\"literal\">null</span>&#125;</div><div class=\"line\"><span class=\"comment\">//判断x是否被认为是true的同义词</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">truthy</span>(<span class=\"params\">x</span>)</span>&#123; <span class=\"keyword\">return</span> (x !== <span class=\"literal\">false</span> &amp;&amp; existy(x))&#125;</div><div class=\"line\"></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">undefined</span>].map(existy)</div><div class=\"line\"><span class=\"comment\">//[true, false, true, false]</span></div><div class=\"line\">[<span class=\"number\">1</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">undefined</span>].map(truthy)</div><div class=\"line\"><span class=\"comment\">//[true, false, false, false]</span></div></pre></td></tr></table></figure></p>\n<p>那么就可以代替以下操作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(condition)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> _.isFunction(doSomething) ? doSomething() : doSomething;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doWhen</span>(<span class=\"params\">cond, action</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(truthy(cond))</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> action();</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>返回常量的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">always</span>(<span class=\"params\">VALUE</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> VALUE;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = always(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)</div><div class=\"line\">f() === f() <span class=\"comment\">//true</span></div></pre></td></tr></table></figure></p>\n<p>在来几个基本函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cat</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = _.first(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span>(existy(head))&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> head.concat.apply(head, _.rest(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> [];</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">cat([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>],[<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]) <span class=\"comment\">//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\"><span class=\"comment\">//第一个</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">construct</span>(<span class=\"params\">head, tail</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cat([head], _.toArray(tail))</div><div class=\"line\">&#125;</div><div class=\"line\">construct(<span class=\"number\">42</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[42, 1, 2, 3]</span></div><div class=\"line\"><span class=\"comment\">//第二个</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapcat</span>(<span class=\"params\">fun, coll</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> cat.apply(<span class=\"literal\">null</span>, _.map(coll,fun))</div><div class=\"line\">&#125;</div><div class=\"line\">mapcat(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> construct(e,[<span class=\"string\">','</span>]);</div><div class=\"line\">&#125;,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[1, \",\", 2, \",\", 3, \",\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">butLast</span>(<span class=\"params\">coll</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> _.toArray(coll).slice(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interpost</span>(<span class=\"params\">inter, coll</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> butLast(mapcat(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> construct(e, [inter]);</div><div class=\"line\">    &#125;, coll))</div><div class=\"line\">&#125;</div><div class=\"line\">interpost(<span class=\"string\">\",\"</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[1, \",\", 2, \",\", 3]</span></div></pre></td></tr></table></figure></p>\n<p>invoker:接受一个方法，并在任何给定的对象上调用它<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">invoker</span>(<span class=\"params\">NAME,METHOD</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target <span class=\"regexp\">/*args...*/</span></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(!existy(target)) fail(<span class=\"string\">'must provide a target'</span>);</div><div class=\"line\">        <span class=\"keyword\">var</span> targetMethod = target[NAME];</div><div class=\"line\">        <span class=\"keyword\">var</span> args = _.rest(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> doWhen((existy(targetMethod) &amp;&amp; METHOD === targetMethod),</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> targetMethod.apply(target,args)</div><div class=\"line\">            &#125;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rev = invoker(<span class=\"string\">'reverse'</span>,<span class=\"built_in\">Array</span>.prototype.reverse)</div><div class=\"line\"></div><div class=\"line\">rev([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</div><div class=\"line\"><span class=\"comment\">//[3, 2, 1]</span></div></pre></td></tr></table></figure></p>\n<p>防止不存在的函数：full<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> nums = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">null</span>,<span class=\"number\">5</span>]</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce.call(nums,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,n</span>)</span>&#123;<span class=\"keyword\">return</span> total * n&#125;); <span class=\"comment\">//0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fnull</span>(<span class=\"params\">fun <span class=\"regexp\">/*,default*/</span></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> defaults = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"regexp\">/*args*/</span></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> args = <span class=\"built_in\">Array</span>.prototype.map.call(<span class=\"built_in\">arguments</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e, i</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> existy(e) ? e : defaults[i];</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fun.apply(fun, args)</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> safeMult = fnull(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">total,n</span>)</span>&#123;<span class=\"keyword\">return</span> total * n&#125;, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.reduce.call(nums,safeMult); <span class=\"comment\">//30</span></div><div class=\"line\"></div><div class=\"line\">可以这样使用</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defaults</span>(<span class=\"params\">d</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, k</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> val = fnull(_.identity,d[k])</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> o &amp;&amp; val(o[k]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> lookup = defaults(&#123;<span class=\"attr\">critical</span>:<span class=\"number\">108</span>&#125;);</div><div class=\"line\">\t<span class=\"keyword\">return</span> lookup(config, <span class=\"string\">'critical'</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(doSomething(&#123;<span class=\"attr\">critical</span>:<span class=\"number\">9</span>&#125;)) <span class=\"comment\">//9</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(doSomething(&#123;&#125;)) <span class=\"comment\">//108</span></div></pre></td></tr></table></figure></p>\n<p>利用invoker 如果调用到目标对象不具有的方法会返回undefined，可以组合多个invoker 形成多态函数，或者根据不同参数产生不同行为的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dispatch</span>(<span class=\"params\"><span class=\"regexp\">/* funs */</span></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> funs = _.toArray(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> size = funs.length;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target <span class=\"regexp\">/*, args*/</span></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ret = <span class=\"literal\">undefined</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> args = _.rest(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> fun;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> funIndex = <span class=\"number\">0</span>; funIndex &lt; size; funIndex++) &#123;</div><div class=\"line\">\t\t\tfun = funs[funIndex];</div><div class=\"line\">\t\t\tret = fun.apply(fun, construct(target,args))</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(existy(ret)) <span class=\"keyword\">return</span> ret;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ret</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> str = dispatch(</div><div class=\"line\">\tinvoker(<span class=\"string\">'toString'</span>,<span class=\"built_in\">Array</span>.prototype.toString),</div><div class=\"line\">\tinvoker(<span class=\"string\">'toString'</span>,<span class=\"built_in\">String</span>.prototype.toString)</div><div class=\"line\">\t)</div><div class=\"line\">str(<span class=\"string\">\"a\"</span>) <span class=\"comment\">//\"a\"</span></div><div class=\"line\">str([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]) <span class=\"comment\">//\"1,2,3,4\"</span></div></pre></td></tr></table></figure></p>\n<p>当然也可以这样做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">stringReverse</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!_.isString(s)) <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> s.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">stringReverse(<span class=\"string\">\"abc\"</span>) <span class=\"comment\">//\"cba\"</span></div><div class=\"line\">stringReverse(<span class=\"number\">1</span>) <span class=\"comment\">//undefined</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> rev = dispatch(</div><div class=\"line\">\tinvoker(<span class=\"string\">'reverse'</span>,<span class=\"built_in\">Array</span>.prototype.reverse),</div><div class=\"line\">\tstringReverse</div><div class=\"line\">\t)</div><div class=\"line\"></div><div class=\"line\">rev([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[3,2,1]</span></div><div class=\"line\">rev(<span class=\"string\">'abc'</span>) <span class=\"comment\">// \"cba\"</span></div></pre></td></tr></table></figure></p>\n<p>还可以继续包装返回默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sillyReverse = dispatch(rev,always(<span class=\"number\">42</span>));</div><div class=\"line\">sillyReverse([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//[3,2,1]</span></div><div class=\"line\">sillyReverse(<span class=\"string\">'abc'</span>)<span class=\"comment\">//'cba'</span></div><div class=\"line\">sillyReverse(<span class=\"number\">10000</span>) <span class=\"comment\">//42</span></div></pre></td></tr></table></figure></p>\n<p>这个函数基本可以取代switch case<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isa</span>(<span class=\"params\">type, action</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === obj.type)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> action(obj)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> performCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'notify'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'notify'</span>); <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;),</div><div class=\"line\">\tisa(<span class=\"string\">'join'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'join'</span>); <span class=\"keyword\">return</span> <span class=\"literal\">true</span>&#125;),</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'alert'</span>)&#125;</div><div class=\"line\">\t);</div><div class=\"line\"></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;) <span class=\"comment\">//notify</span></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;) <span class=\"comment\">//join</span></div><div class=\"line\">performCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;) <span class=\"comment\">//alert</span></div></pre></td></tr></table></figure></p>\n<p>可以很轻松的扩展<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performAdminCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'kill'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'kill'</span>);<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;),</div><div class=\"line\">\tperformCommand</div><div class=\"line\">\t)</div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;) </div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;)</div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'kill'</span>&#125;) <span class=\"comment\">//kill</span></div><div class=\"line\">performAdminCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>可以实现重载<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> performTrialUserCommand = dispatch(</div><div class=\"line\">\tisa(<span class=\"string\">'join'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'user join'</span>);<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;&#125;),</div><div class=\"line\">\tperformCommand</div><div class=\"line\">\t)</div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'notify'</span>&#125;)</div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'join'</span>&#125;) <span class=\"comment\">//user join</span></div><div class=\"line\">performTrialUserCommand(&#123;<span class=\"attr\">type</span>:<span class=\"string\">'other'</span>&#125;)</div></pre></td></tr></table></figure></p>\n<p>写一个自动柯里化参数的函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\">fun</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> fun(arg)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>待续</p>\n"},{"title":"hexo 结合 travis 实现静态页面的自动部署","date":"2017-03-13T04:23:58.000Z","_content":"\n### 1. 部署hexo\n\n参见官方教程 [hexo](https://hexo.io/docs/index.html)\n\n### 2. 提交git\n\n分别将生成的静态页面和项目本体提交到不同的分支\n\n例如： [静态页面](https://github.com/HiramGao/hiramgao.github.io/tree/master) [项目分支](https://github.com/HiramGao/hiramgao.github.io/tree/dev)\n\n### 3. 自动发布静态文件\n\n[Travis CI官网](https://travis-ci.org/)利用github账号登录\n\n将当前的项目添加为自动构建的仓库\n\n打开  **Build only if .travis.yml is present** 和 **Build pushes** 选项\n\n利用 `ssh-keygen -t rsa -C “例子@gmail.com”` 生成id_rsa和id_rsa.pub\n\n将.pub文件内容添加到 github 项目 **settings > Deploy keys** 处，记得勾选 **Allow write access**\n\n安装travis命令行\n\n``` bash\ngem install travis\ntravis login --auto\n# 将id_rsa加密\ntravis encrypt-file id_rsa --add\n# 产生.enc文件\n```\n\n\n\n在项目文件夹建立`.travis`文件夹，将生成的`.enc`文件放入其中，同时添加`ssh_config`文件，填写一下内容\n\n``` yaml\nHost github.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/id_rsa\n    IdentitiesOnly yes\n```\n\n\n\n添加部署文件 `.travis.yml`\n\n``` yaml\nlanguage: node_js\nsudo: false\nbranches:\n  only:\n  - dev\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_24f627a79d15_key -iv $encrypted_24f627a79d15_iv -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n- cp .travis/ssh_config ~/.ssh/config\n- git config --global user.name 'hiramgao'\n- git config --global user.email hiramgao@163.com\ninstall:\n- npm install hexo-cli -g\n- npm install\nscript:\n- npm run deploy\ncache:\n  directories:\n  - node_modules\n```\n\n\n\n最后 提交到github 会自动构建并发布页面\n\n\n\n参考 [我的博客](https://github.com/HiramGao/hiramgao.github.io/tree/dev)\n\n","source":"_posts/hexo-结合-travis-c-实现静态页面的自动部署.md","raw":"---\ntitle: hexo 结合 travis 实现静态页面的自动部署\ndate: 2017-03-13 12:23:58\ntags: \n\t- hexo\n\t- travis\n\n---\n\n### 1. 部署hexo\n\n参见官方教程 [hexo](https://hexo.io/docs/index.html)\n\n### 2. 提交git\n\n分别将生成的静态页面和项目本体提交到不同的分支\n\n例如： [静态页面](https://github.com/HiramGao/hiramgao.github.io/tree/master) [项目分支](https://github.com/HiramGao/hiramgao.github.io/tree/dev)\n\n### 3. 自动发布静态文件\n\n[Travis CI官网](https://travis-ci.org/)利用github账号登录\n\n将当前的项目添加为自动构建的仓库\n\n打开  **Build only if .travis.yml is present** 和 **Build pushes** 选项\n\n利用 `ssh-keygen -t rsa -C “例子@gmail.com”` 生成id_rsa和id_rsa.pub\n\n将.pub文件内容添加到 github 项目 **settings > Deploy keys** 处，记得勾选 **Allow write access**\n\n安装travis命令行\n\n``` bash\ngem install travis\ntravis login --auto\n# 将id_rsa加密\ntravis encrypt-file id_rsa --add\n# 产生.enc文件\n```\n\n\n\n在项目文件夹建立`.travis`文件夹，将生成的`.enc`文件放入其中，同时添加`ssh_config`文件，填写一下内容\n\n``` yaml\nHost github.com\n    User git\n    StrictHostKeyChecking no\n    IdentityFile ~/.ssh/id_rsa\n    IdentitiesOnly yes\n```\n\n\n\n添加部署文件 `.travis.yml`\n\n``` yaml\nlanguage: node_js\nsudo: false\nbranches:\n  only:\n  - dev\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_24f627a79d15_key -iv $encrypted_24f627a79d15_iv -in ./.travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n- cp .travis/ssh_config ~/.ssh/config\n- git config --global user.name 'hiramgao'\n- git config --global user.email hiramgao@163.com\ninstall:\n- npm install hexo-cli -g\n- npm install\nscript:\n- npm run deploy\ncache:\n  directories:\n  - node_modules\n```\n\n\n\n最后 提交到github 会自动构建并发布页面\n\n\n\n参考 [我的博客](https://github.com/HiramGao/hiramgao.github.io/tree/dev)\n\n","slug":"hexo-结合-travis-c-实现静态页面的自动部署","published":1,"updated":"2017-03-28T07:04:56.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0t7ael20007x4qnmz87oxg0","content":"<h3 id=\"1-部署hexo\"><a href=\"#1-部署hexo\" class=\"headerlink\" title=\"1. 部署hexo\"></a>1. 部署hexo</h3><p>参见官方教程 <a href=\"https://hexo.io/docs/index.html\" target=\"_blank\" rel=\"external\">hexo</a></p>\n<h3 id=\"2-提交git\"><a href=\"#2-提交git\" class=\"headerlink\" title=\"2. 提交git\"></a>2. 提交git</h3><p>分别将生成的静态页面和项目本体提交到不同的分支</p>\n<p>例如： <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/master\" target=\"_blank\" rel=\"external\">静态页面</a> <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/dev\" target=\"_blank\" rel=\"external\">项目分支</a></p>\n<h3 id=\"3-自动发布静态文件\"><a href=\"#3-自动发布静态文件\" class=\"headerlink\" title=\"3. 自动发布静态文件\"></a>3. 自动发布静态文件</h3><p><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">Travis CI官网</a>利用github账号登录</p>\n<p>将当前的项目添加为自动构建的仓库</p>\n<p>打开  <strong>Build only if .travis.yml is present</strong> 和 <strong>Build pushes</strong> 选项</p>\n<p>利用 <code>ssh-keygen -t rsa -C “例子@gmail.com”</code> 生成id_rsa和id_rsa.pub</p>\n<p>将.pub文件内容添加到 github 项目 <strong>settings &gt; Deploy keys</strong> 处，记得勾选 <strong>Allow write access</strong></p>\n<p>安装travis命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis</div><div class=\"line\">travis login --auto</div><div class=\"line\"><span class=\"comment\"># 将id_rsa加密</span></div><div class=\"line\">travis encrypt-file id_rsa --add</div><div class=\"line\"><span class=\"comment\"># 产生.enc文件</span></div></pre></td></tr></table></figure>\n<p>在项目文件夹建立<code>.travis</code>文件夹，将生成的<code>.enc</code>文件放入其中，同时添加<code>ssh_config</code>文件，填写一下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">Host</span> <span class=\"string\">github.com</span></div><div class=\"line\">    <span class=\"string\">User</span> <span class=\"string\">git</span></div><div class=\"line\">    <span class=\"string\">StrictHostKeyChecking</span> <span class=\"literal\">no</span></div><div class=\"line\">    <span class=\"string\">IdentityFile</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\">    <span class=\"string\">IdentitiesOnly</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n<p>添加部署文件 <code>.travis.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></div><div class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">dev</span></div><div class=\"line\"><span class=\"attr\">before_install:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"bullet\">-K</span> <span class=\"string\">$encrypted_24f627a79d15_key</span> <span class=\"bullet\">-iv</span> <span class=\"string\">$encrypted_24f627a79d15_iv</span> <span class=\"bullet\">-in</span> <span class=\"string\">./.travis/id_rsa.enc</span> <span class=\"bullet\">-out</span> <span class=\"string\">~/.ssh/id_rsa</span> <span class=\"bullet\">-d</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">$(ssh-agent)</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">.travis/ssh_config</span> <span class=\"string\">~/.ssh/config</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">'hiramgao'</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">hiramgao@163.com</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"bullet\">-g</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">deploy</span></div><div class=\"line\"><span class=\"attr\">cache:</span></div><div class=\"line\"><span class=\"attr\">  directories:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">node_modules</span></div></pre></td></tr></table></figure>\n<p>最后 提交到github 会自动构建并发布页面</p>\n<p>参考 <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/dev\" target=\"_blank\" rel=\"external\">我的博客</a></p>\n","excerpt":"","more":"<h3 id=\"1-部署hexo\"><a href=\"#1-部署hexo\" class=\"headerlink\" title=\"1. 部署hexo\"></a>1. 部署hexo</h3><p>参见官方教程 <a href=\"https://hexo.io/docs/index.html\">hexo</a></p>\n<h3 id=\"2-提交git\"><a href=\"#2-提交git\" class=\"headerlink\" title=\"2. 提交git\"></a>2. 提交git</h3><p>分别将生成的静态页面和项目本体提交到不同的分支</p>\n<p>例如： <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/master\">静态页面</a> <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/dev\">项目分支</a></p>\n<h3 id=\"3-自动发布静态文件\"><a href=\"#3-自动发布静态文件\" class=\"headerlink\" title=\"3. 自动发布静态文件\"></a>3. 自动发布静态文件</h3><p><a href=\"https://travis-ci.org/\">Travis CI官网</a>利用github账号登录</p>\n<p>将当前的项目添加为自动构建的仓库</p>\n<p>打开  <strong>Build only if .travis.yml is present</strong> 和 <strong>Build pushes</strong> 选项</p>\n<p>利用 <code>ssh-keygen -t rsa -C “例子@gmail.com”</code> 生成id_rsa和id_rsa.pub</p>\n<p>将.pub文件内容添加到 github 项目 <strong>settings &gt; Deploy keys</strong> 处，记得勾选 <strong>Allow write access</strong></p>\n<p>安装travis命令行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis</div><div class=\"line\">travis login --auto</div><div class=\"line\"><span class=\"comment\"># 将id_rsa加密</span></div><div class=\"line\">travis encrypt-file id_rsa --add</div><div class=\"line\"><span class=\"comment\"># 产生.enc文件</span></div></pre></td></tr></table></figure>\n<p>在项目文件夹建立<code>.travis</code>文件夹，将生成的<code>.enc</code>文件放入其中，同时添加<code>ssh_config</code>文件，填写一下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">Host</span> <span class=\"string\">github.com</span></div><div class=\"line\">    <span class=\"string\">User</span> <span class=\"string\">git</span></div><div class=\"line\">    <span class=\"string\">StrictHostKeyChecking</span> <span class=\"literal\">no</span></div><div class=\"line\">    <span class=\"string\">IdentityFile</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\">    <span class=\"string\">IdentitiesOnly</span> <span class=\"literal\">yes</span></div></pre></td></tr></table></figure>\n<p>添加部署文件 <code>.travis.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></div><div class=\"line\"><span class=\"attr\">sudo:</span> <span class=\"literal\">false</span></div><div class=\"line\"><span class=\"attr\">branches:</span></div><div class=\"line\"><span class=\"attr\">  only:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">dev</span></div><div class=\"line\"><span class=\"attr\">before_install:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">openssl</span> <span class=\"string\">aes-256-cbc</span> <span class=\"bullet\">-K</span> <span class=\"string\">$encrypted_24f627a79d15_key</span> <span class=\"bullet\">-iv</span> <span class=\"string\">$encrypted_24f627a79d15_iv</span> <span class=\"bullet\">-in</span> <span class=\"string\">./.travis/id_rsa.enc</span> <span class=\"bullet\">-out</span> <span class=\"string\">~/.ssh/id_rsa</span> <span class=\"bullet\">-d</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"number\">600</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">eval</span> <span class=\"string\">$(ssh-agent)</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">ssh-add</span> <span class=\"string\">~/.ssh/id_rsa</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">.travis/ssh_config</span> <span class=\"string\">~/.ssh/config</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">'hiramgao'</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"bullet\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">hiramgao@163.com</span></div><div class=\"line\"><span class=\"attr\">install:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"bullet\">-g</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></div><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">deploy</span></div><div class=\"line\"><span class=\"attr\">cache:</span></div><div class=\"line\"><span class=\"attr\">  directories:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">node_modules</span></div></pre></td></tr></table></figure>\n<p>最后 提交到github 会自动构建并发布页面</p>\n<p>参考 <a href=\"https://github.com/HiramGao/hiramgao.github.io/tree/dev\">我的博客</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0t7aeku0002x4qnx5ztkj4r","tag_id":"cj0t7aekx0003x4qn2m6t2g3q","_id":"cj0t7ael00005x4qn0i93koaa"},{"post_id":"cj0t7aeku0002x4qnx5ztkj4r","tag_id":"cj0t7aekz0004x4qndje5gqk1","_id":"cj0t7ael00006x4qnsodcyn9n"},{"post_id":"cj0t7ael20007x4qnmz87oxg0","tag_id":"cj0t7ael80009x4qnoiwn5h38","_id":"cj0t7ael9000bx4qnwhsqaayj"},{"post_id":"cj0t7ael20007x4qnmz87oxg0","tag_id":"cj0t7ael8000ax4qn69sfqy6m","_id":"cj0t7ael9000cx4qn53xzplaj"}],"Tag":[{"name":"JavaScript","_id":"cj0t7aekx0003x4qn2m6t2g3q"},{"name":"函数式编程","_id":"cj0t7aekz0004x4qndje5gqk1"},{"name":"hexo","_id":"cj0t7ael80009x4qnoiwn5h38"},{"name":"travis","_id":"cj0t7ael8000ax4qn69sfqy6m"}]}}